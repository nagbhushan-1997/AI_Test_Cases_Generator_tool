
============================================================
Test Generation Log - 2025-06-13 11:20:32
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

============================================================
Test Generation Log - 2025-06-13 11:45:25
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..489e195 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,20 @@
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert 3 * 4 == 12
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
```python
import pytest
import random

# Test case for addition
def test_addition():
    """Test the basic arithmetic operation of addition."""
    assert 1 + 1 == 2

# Test case for subtraction
def test_subtraction():
    """Test the basic arithmetic operation of subtraction."""
    assert 5 - 3 == 2

# Test case for multiplication
def test_multiplication():
    """Test the basic arithmetic operation of multiplication."""
    assert 3 * 4 == 12

# Test case for division
def test_division():
    """Test the basic arithmetic operation of division, handling potential ZeroDivisionError."""
    try:
        assert 10 / 2 == 5
    except ZeroDivisionError:
        pytest.skip("Division by zero is not allowed.")

# Test case for string concatenation
def test_string_concatenation():
    """Test the concatenation of two strings."""
    assert "Hello, " + "World!" == "Hello, World!"

# Test case for list append
def test_list_append():
    """Test appending an element to a list."""
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

# Test case for random number generation
def test_random_number_generation():
    """Test generating a random integer within a specified range."""
    min_value = 10
    max_value = 100
    generated_number = random.randint(min_value, max_value)
    assert isinstance(generated_number, int)

# Test case for list sorting
def test_list_sorting():
    """Test the sorting of a list in ascending order."""
    unsorted_list = [64, 34, 25, 12, 22, 11, 90]
    sorted_list = sorted(unsorted_list)
    assert sorted_list == [11, 12, 22, 25, 34, 64, 90]

# Test case for boolean operations
def test_boolean_operations():
    """Test the basic boolean operations."""
    assert not (1 + 1 != 2) or 1 == 1
    assert (2 > 1) and (3 >= 2)

# Test case for exception handling
def test_exception_handling():
    """Test catching a custom exception."""
    try:
        raise ValueError("Invalid input")
    except ValueError as e:
        assert str(e) == "Invalid input"

```

This updated version of your tests should help cover more scenarios, especially when it comes to testing more complex and edge cases.

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.22s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 11:48:08
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..489e195 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,20 @@
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert 3 * 4 == 12
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
```python
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert 3 * 4 == 12

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    result = "Hello, " + "World!"
    assert result == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_list_append_invalid_type():
    with pytest.raises(TypeError):
        [1, 2, 3].append("Hello")

def test_list_append_to_empty_list():
    result = []
    result.append(4)
    assert result == [4]
```

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 12:06:24
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..489e195 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,20 @@
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert 3 * 4 == 12
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert 3  4 == 12

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_string_indexing():
    my_str = "Hello"
    assert my_str[0] == "H"

def test_list_indexing():
    my_list = [1, 2, 3]
    assert my_list[0] == 1

def test_string_formatting():
    name = "John"
    age = 30
    assert f"{name} is {age} years old" == "John is 30 years old"

def test_assertion_error():
    with pytest.raises(AssertionError):
        assert 1 + 2 == 3

def test_type_hints():
    def add(a: int, b: int) -> int:
        return a + b
    assert add(3, 4) == 7

def test_pytest_parametrize():
    @pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
    def test_example(a, b, c):
        assert a + b + c == 12

def test_pytest fixture():
    @pytest.fixture
    def my_fixture():
        return "Hello"
    def test_example(my_fixture):
        assert my_fixture == "Hello"

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 10
E       assert 3  4 == 12
E                 ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.11s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 12:11:15
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..489e195 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,20 @@
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert 3 * 4 == 12
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert 3  4 == 12

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 10
E       assert 3  4 == 12
E                 ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 12:17:05
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

============================================================
Test Generation Log - 2025-06-13 12:20:31
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

============================================================
Test Generation Log - 2025-06-13 14:42:50
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..7fcb2b9 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,22 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert math.prod([2, 3, 4]) == 24  # Using math.prod for multiplication
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest
import math

@pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
def test_addition(a, b, c):
    assert a + b + c == 12

@pytest.mark.parametrize("a,b", [(7, 8), (9, 10)])
def test_subtraction(a, b):
    assert a - b == 1

@pytest.mark.parametrize("numbers", [[2, 3], [4, 5]])
def test_multiplication(numbers):
    result = numbers[0]  numbers[1]
    assert result == numbers[0]  numbers[1]

@pytest.mark.parametrize("a,b", [(10, 2), (20, 4)])
def test_division(a, b):
    assert a / b == 5

@pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi,", "Bye!")])
def test_string_concatenation(s1, s2):
    result = s1 + s2
    assert result == s1 + s2

@pytest.mark.parametrize("lst,num", [(list(enumerate([1, 2, 3])), [0, 1, 2])])
def test_list_append(lst, num):
    lst.append(num)
    assert lst == list(range(len(lst)))

@pytest.fixture
def list_init():
    return []

@pytest.mark.parametrize("init_value", [10, "a", None])
def test_list_append_with_init(init_value):
    my_list = list_init()
    if isinstance(init_value, int) or isinstance(init_value, float):
        my_list.append(init_value)
    assert len(my_list) == 1

@pytest.fixture
def list_init():
    return []

@pytest.mark.parametrize("init_value", [10, "a", None])
def test_list_append_with_init_list_init(init_value):
    my_list = []
    if isinstance(init_value, int) or isinstance(init_value, float):
        my_list.append(init_value)
    assert len(my_list) == 1

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 14
E       result = numbers[0]  numbers[1]
E                            ^^^^^^^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.14s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 14:53:17
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

============================================================
Test Generation Log - 2025-06-13 15:14:39
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

Code Diff:
------------------------------
diff --git a/app.py b/app.py
index ba920d2..cb989b1 100644
--- a/app.py
+++ b/app.py
@@ -1,22 +1,144 @@
 import streamlit as st
+import os
+from datetime import datetime
 from utils.git_utils import get_changed_files, get_file_diff
 from utils.llm_utils import suggest_test_changes
 from utils.test_runner import run_tests
 
 st.title("🤖 AI Test Automation Tool")
 
+# 1. Git Repo Path
 repo_path = st.text_input("Enter Git Repo Path", value="./")
 
+# 2. Detect Git Changes
 if st.button("Detect Changes"):
     files = get_changed_files(repo_path)
+
+    if not files:
+        st.info("✅ No changes detected.")
+    else:
+        st.session_state["detected_files"] = files
+        st.success(f"🔍 Found {len(files)} changed file(s)")
+
+# Display detected files and handle suggestions
+if "detected_files" in st.session_state:
+    files = st.session_state["detected_files"]
+    
     for f in files:
-        st.write(f"📄 {f}")
+        st.write(f"📄 **Changed File:** `{f}`")
+        
+        # Show the diff
         diff = get_file_diff(repo_path, f)
-        st.code(diff, language="diff")
-        if st.button(f"Suggest Test Updates for {f}"):
-            suggestions = suggest_test_changes(f, diff)
+        with st.expander(f"View diff for {f}"):
+            st.code(diff, language="diff")
+
+        # Suggest Test Button
+        suggest_btn_key = f"suggest_{f}"
+        
+        if st.button(f"🔮 Generate Test Cases for {f}", key=suggest_btn_key):
+            with st.spinner(f"Generating test suggestions for {f}..."):
+                suggestions = suggest_test_changes(f, diff)
+                st.session_state[f"suggestions_{f}"] = suggestions
+
+        # If suggestion exists, show it and confirm option
+        if f"suggestions_{f}" in st.session_state:
+            suggestions = st.session_state[f"suggestions_{f}"]
+            
+            st.subheader(f"💡 Suggested Test Cases for `{f}`:")
             st.code(suggestions, language="python")
 
-if st.button("Run Tests"):
-    output = run_tests(repo_path)
-    st.code(output)
\ No newline at end of file
+            # Create two columns for buttons
+            col1, col2 = st.columns(2)
+            
+            with col1:
+                confirm_btn_key = f"confirm_{f}"
+                if st.button(f"✅ Accept & Save Test Cases", key=confirm_btn_key):
+                    # Check if suggestions contain valid test functions
+                    if "def test_" in suggestions and not suggestions.startswith("Error"):
+                        # Create test file name based on original file
+                        base_name = os.path.splitext(f)[0]
+                        test_file_name = f"test_{base_name}.py"
+                        test_file_path = os.path.join(repo_path, "tests", test_file_name)
+                        
+                        # Ensure tests directory exists
+                        os.makedirs(os.path.join(repo_path, "tests"), exist_ok=True)
+                        
+                        # # Write the test file
+                        # with open(test_file_path, "w") as file:
+                        #     file.write(suggestions)
+
+                        # Let user choose where to save test files
+                        test_directory = st.text_input("Test Directory", value="tests")
+
+                        # Then in your file creation code:
+                        test_file_path = os.path.join(repo_path, test_directory, test_file_name)
+
+                        # Ensure the directory exists
+                        os.makedirs(os.path.dirname(test_file_path), exist_ok=True)
+
+                        # Write the test file
+                        with open(test_file_path, "w", encoding="utf-8") as file:
+                            file.write(suggestions)
+
+                        # Show full absolute path
+                        st.success(f"✅ Test file created at: `{os.path.abspath(test_file_path)}`")
+                        
+                        # Execute the tests
+                        st.info(f"🧪 Running tests for {test_file_name}...")
+                        test_results = run_tests(test_file_path)
+                        
+                        # Log everything
+                        with open("test_update_log.txt", "a", encoding="utf-8") as log_file:
+                            log_file.write(f"\n{'='*60}\n")
+                            log_file.write(f"Test Generation Log - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
+                            log_file.write(f"{'='*60}\n")
+                            log_file.write(f"Original File: {f}\n")
+                            log_file.write(f"Test File Created: {test_file_name}\n")
+                            log_file.write(f"Test File Path: {test_file_path}\n")
+                            log_file.write(f"\nCode Diff:\n{'-'*30}\n{diff}\n")
+                            log_file.write(f"\nGenerated Test Cases:\n{'-'*30}\n{suggestions}\n")
+                            log_file.write(f"\nTest Execution Results:\n{'-'*30}\n{test_results}\n")
+                            log_file.write(f"{'='*60}\n")
+                        
+                        # Show results in UI
+                        st.success(f"✅ Test file '{test_file_name}' created and executed!")
+                        st.subheader("🧪 Test Execution Results:")
+                        st.code(test_results)
+                        
+                        # Clear the suggestion from session state
+                        del st.session_state[f"suggestions_{f}"]
+                        
+                    else:
+                        st.error("⚠️ Invalid test cases generated. Please try again.")
+            
+            with col2:
+                reject_btn_key = f"reject_{f}"
+                if st.button(f"❌ Reject Suggestions", key=reject_btn_key):
+                    del st.session_state[f"suggestions_{f}"]
+                    st.info("Suggestions rejected.")
+
+        st.divider()
+
+# 3. Run All Tests (Optional - run all existing tests)
+st.subheader("🧪 Test Execution")
+col1, col2 = st.columns(2)
+
+with col1:
+    if st.button("Run All Tests"):
+        test_path = os.path.join(repo_path, "tests")
+        if os.path.exists(test_path):
+            result = run_tests(test_path)
+            st.subheader("📊 All Test Results:")
+            st.code(result)
+        else:
+            st.warning("No tests directory found.")
+
+with col2:
+    if st.button("View Test Log"):
+        if os.path.exists("test_update_log.txt"):
+            with open("test_update_log.txt", "r") as log_file:
+                log_content = log_file.read()
+            st.subheader("📋 Test Update Log:")
+            st.text_area("Log Content", log_content, height=400)
+        else:
+            st.info("No log file found yet.")
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest
import os
from datetime import datetime
from utils.git_utils import get_changed_files, get_file_diff
from utils.llm_utils import suggest_test_changes
from utils.test_runner import run_tests

def test_detect_changes(repo_path):
    files = get_changed_files(repo_path)
    assert files is not None

def test_get_file_diff(repo_path, file_name):
    diff = get_file_diff(repo_path, file_name)
    assert isinstance(diff, str)

def test_suggest_test_changes(file_name, diff):
    suggestions = suggest_test_changes(file_name, diff)
    assert isinstance(suggestions, str)

def test_create_test_file(test_directory, test_file_name, file_name, diff, suggestions):
    test_file_path = os.path.join(repo_path, test_directory, test_file_name)
    with open(test_file_path, "w", encoding="utf-8") as file:
        file.write(suggestions)
    assert os.path.exists(test_file_path)

def test_execute_tests(test_file_path, result):
    run_tests(test_file_path)
    assert isinstance(result, str)

def test_run_all_tests(repo_path, result):
    test_path = os.path.join(repo_path, "tests")
    run_tests(test_path)
    assert isinstance(result, str)

def test_view_test_log(log_content):
    assert log_content is not None

@pytest.fixture
def repo_path():
    return "./"

@pytest.fixture
def file_name():
    return "test_file.py"

@pytest.fixture
def diff(file_name, repo_path):
    return get_file_diff(repo_path, file_name)

@pytest.fixture
def suggestions(file_name, diff):
    return suggest_test_changes(file_name, diff)

@pytest.fixture
def test_directory(test_file_name):
    return "tests"

@pytest.fixture
def test_file_name(test_file_name):
    return test_file_name

@pytest.fixture
def test_file_path(repo_path, test_directory, test_file_name):
    return os.path.join(repo_path, test_directory, test_file_name)

@pytest.fixture
def result(test_file_path):
    return run_tests(test_file_path)

@pytest.fixture
def log_content():
    with open("test_update_log.txt", "r") as log_file:
        return log_file.read()

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_____________________ ERROR collecting tests/test_app.py ______________________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_app.py:4: in <module>
    from utils.git_utils import get_changed_files, get_file_diff
E   ModuleNotFoundError: No module named 'utils'
=========================== short test summary info ===========================
ERROR tests/test_app.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 15:23:33
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..7fcb2b9 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,22 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert math.prod([2, 3, 4]) == 24  # Using math.prod for multiplication
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest
import math

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert 2  3  4 == 24

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_assert_true():
    assert True

def test_assert_false():
    assert False

def test_assert_equal():
    assert 5 == 5

def test_assert_not_equal():
    assert 5 != 6

def test_assert_greater_than():
    assert 5 > 3

def test_assert_less_than():
    assert 3 < 5

def test_assert_greater_than_or_equal():
    assert 5 >= 5

def test_assert_less_than_or_equal():
    assert 5 <= 5

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 11
E       assert 2  3  4 == 24
E                 ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 15:23:51
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

Code Diff:
------------------------------
diff --git a/app.py b/app.py
index ba920d2..cb989b1 100644
--- a/app.py
+++ b/app.py
@@ -1,22 +1,144 @@
 import streamlit as st
+import os
+from datetime import datetime
 from utils.git_utils import get_changed_files, get_file_diff
 from utils.llm_utils import suggest_test_changes
 from utils.test_runner import run_tests
 
 st.title("🤖 AI Test Automation Tool")
 
+# 1. Git Repo Path
 repo_path = st.text_input("Enter Git Repo Path", value="./")
 
+# 2. Detect Git Changes
 if st.button("Detect Changes"):
     files = get_changed_files(repo_path)
+
+    if not files:
+        st.info("✅ No changes detected.")
+    else:
+        st.session_state["detected_files"] = files
+        st.success(f"🔍 Found {len(files)} changed file(s)")
+
+# Display detected files and handle suggestions
+if "detected_files" in st.session_state:
+    files = st.session_state["detected_files"]
+    
     for f in files:
-        st.write(f"📄 {f}")
+        st.write(f"📄 **Changed File:** `{f}`")
+        
+        # Show the diff
         diff = get_file_diff(repo_path, f)
-        st.code(diff, language="diff")
-        if st.button(f"Suggest Test Updates for {f}"):
-            suggestions = suggest_test_changes(f, diff)
+        with st.expander(f"View diff for {f}"):
+            st.code(diff, language="diff")
+
+        # Suggest Test Button
+        suggest_btn_key = f"suggest_{f}"
+        
+        if st.button(f"🔮 Generate Test Cases for {f}", key=suggest_btn_key):
+            with st.spinner(f"Generating test suggestions for {f}..."):
+                suggestions = suggest_test_changes(f, diff)
+                st.session_state[f"suggestions_{f}"] = suggestions
+
+        # If suggestion exists, show it and confirm option
+        if f"suggestions_{f}" in st.session_state:
+            suggestions = st.session_state[f"suggestions_{f}"]
+            
+            st.subheader(f"💡 Suggested Test Cases for `{f}`:")
             st.code(suggestions, language="python")
 
-if st.button("Run Tests"):
-    output = run_tests(repo_path)
-    st.code(output)
\ No newline at end of file
+            # Create two columns for buttons
+            col1, col2 = st.columns(2)
+            
+            with col1:
+                confirm_btn_key = f"confirm_{f}"
+                if st.button(f"✅ Accept & Save Test Cases", key=confirm_btn_key):
+                    # Check if suggestions contain valid test functions
+                    if "def test_" in suggestions and not suggestions.startswith("Error"):
+                        # Create test file name based on original file
+                        base_name = os.path.splitext(f)[0]
+                        test_file_name = f"test_{base_name}.py"
+                        test_file_path = os.path.join(repo_path, "tests", test_file_name)
+                        
+                        # Ensure tests directory exists
+                        os.makedirs(os.path.join(repo_path, "tests"), exist_ok=True)
+                        
+                        # # Write the test file
+                        # with open(test_file_path, "w") as file:
+                        #     file.write(suggestions)
+
+                        # Let user choose where to save test files
+                        test_directory = st.text_input("Test Directory", value="tests")
+
+                        # Then in your file creation code:
+                        test_file_path = os.path.join(repo_path, test_directory, test_file_name)
+
+                        # Ensure the directory exists
+                        os.makedirs(os.path.dirname(test_file_path), exist_ok=True)
+
+                        # Write the test file
+                        with open(test_file_path, "w", encoding="utf-8") as file:
+                            file.write(suggestions)
+
+                        # Show full absolute path
+                        st.success(f"✅ Test file created at: `{os.path.abspath(test_file_path)}`")
+                        
+                        # Execute the tests
+                        st.info(f"🧪 Running tests for {test_file_name}...")
+                        test_results = run_tests(test_file_path)
+                        
+                        # Log everything
+                        with open("test_update_log.txt", "a", encoding="utf-8") as log_file:
+                            log_file.write(f"\n{'='*60}\n")
+                            log_file.write(f"Test Generation Log - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
+                            log_file.write(f"{'='*60}\n")
+                            log_file.write(f"Original File: {f}\n")
+                            log_file.write(f"Test File Created: {test_file_name}\n")
+                            log_file.write(f"Test File Path: {test_file_path}\n")
+                            log_file.write(f"\nCode Diff:\n{'-'*30}\n{diff}\n")
+                            log_file.write(f"\nGenerated Test Cases:\n{'-'*30}\n{suggestions}\n")
+                            log_file.write(f"\nTest Execution Results:\n{'-'*30}\n{test_results}\n")
+                            log_file.write(f"{'='*60}\n")
+                        
+                        # Show results in UI
+                        st.success(f"✅ Test file '{test_file_name}' created and executed!")
+                        st.subheader("🧪 Test Execution Results:")
+                        st.code(test_results)
+                        
+                        # Clear the suggestion from session state
+                        del st.session_state[f"suggestions_{f}"]
+                        
+                    else:
+                        st.error("⚠️ Invalid test cases generated. Please try again.")
+            
+            with col2:
+                reject_btn_key = f"reject_{f}"
+                if st.button(f"❌ Reject Suggestions", key=reject_btn_key):
+                    del st.session_state[f"suggestions_{f}"]
+                    st.info("Suggestions rejected.")
+
+        st.divider()
+
+# 3. Run All Tests (Optional - run all existing tests)
+st.subheader("🧪 Test Execution")
+col1, col2 = st.columns(2)
+
+with col1:
+    if st.button("Run All Tests"):
+        test_path = os.path.join(repo_path, "tests")
+        if os.path.exists(test_path):
+            result = run_tests(test_path)
+            st.subheader("📊 All Test Results:")
+            st.code(result)
+        else:
+            st.warning("No tests directory found.")
+
+with col2:
+    if st.button("View Test Log"):
+        if os.path.exists("test_update_log.txt"):
+            with open("test_update_log.txt", "r") as log_file:
+                log_content = log_file.read()
+            st.subheader("📋 Test Update Log:")
+            st.text_area("Log Content", log_content, height=400)
+        else:
+            st.info("No log file found yet.")
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest
import os
from datetime import datetime
from streamlit import session_state

# Define constants for test directories and files
TEST_DIR = "tests"
TEST_FILE_NAME = "test_{}.py"

def get_changed_files(repo_path):
    return [f for f in os.listdir(repo_path) if f.endswith(".py")]

def suggest_test_changes(file_path, diff):
    # TO DO: implement the logic to generate test cases from a code diff
    pass

def run_tests(test_file_path):
    # TO DO: implement the logic to execute tests and return the results
    pass

# Define test functions
@pytest.fixture(scope="session")
def setup_session_state(repo_path):
    session_state["repo_path"] = repo_path
    session_state["detected_files"] = []
    session_state["suggestions"] = []

def test_detect_changes(repo_path, setup_session_state):
    files = get_changed_files(repo_path)
    assert len(files) == 1

def test_suggest_test_updates_for_file(file_path, setup_session_state):
    suggestions = suggest_test_changes(file_path, b"diff code")
    assert "test_" in str(suggestions)

def test_execute_tests(test_file_path, setup_session_state):
    result = run_tests(test_file_path)
    assert isinstance(result, str)

def test_run_all_tests(repo_path, setup_session_state):
    test_path = os.path.join(repo_path, TEST_DIR)
    assert os.path.exists(test_path)

def test_view_test_log(log_file_path, setup_session_state):
    with open(log_file_path, "r") as log_file:
        log_content = log_file.read()
        assert "Test Update Log" in log_content

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 5 items

tests\test_app.py EEEEE                                                  [100%]

=================================== ERRORS ====================================
____________________ ERROR at setup of test_detect_changes ____________________
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 28
  def test_detect_changes(repo_path, setup_session_state):
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 22
  @pytest.fixture(scope="session")
  def setup_session_state(repo_path):
E       fixture 'repo_path' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, setup_session_state, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py:22
____________ ERROR at setup of test_suggest_test_updates_for_file _____________
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 32
  def test_suggest_test_updates_for_file(file_path, setup_session_state):
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 22
  @pytest.fixture(scope="session")
  def setup_session_state(repo_path):
E       fixture 'repo_path' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, setup_session_state, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py:22
____________________ ERROR at setup of test_execute_tests _____________________
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 36
  def test_execute_tests(test_file_path, setup_session_state):
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 22
  @pytest.fixture(scope="session")
  def setup_session_state(repo_path):
E       fixture 'repo_path' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, setup_session_state, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py:22
____________________ ERROR at setup of test_run_all_tests _____________________
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 40
  def test_run_all_tests(repo_path, setup_session_state):
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 22
  @pytest.fixture(scope="session")
  def setup_session_state(repo_path):
E       fixture 'repo_path' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, setup_session_state, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py:22
____________________ ERROR at setup of test_view_test_log _____________________
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 44
  def test_view_test_log(log_file_path, setup_session_state):
file E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py, line 22
  @pytest.fixture(scope="session")
  def setup_session_state(repo_path):
E       fixture 'repo_path' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, setup_session_state, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py:22
=========================== short test summary info ===========================
ERROR tests/test_app.py::test_detect_changes
ERROR tests/test_app.py::test_suggest_test_updates_for_file
ERROR tests/test_app.py::test_execute_tests
ERROR tests/test_app.py::test_run_all_tests
ERROR tests/test_app.py::test_view_test_log
============================== 5 errors in 0.28s ==============================

============================================================

============================================================
Test Generation Log - 2025-06-13 15:31:30
============================================================
Original File: app.py
Test File Created: test_app.py
Test File Path: ./tests\test_app.py

Code Diff:
------------------------------
diff --git a/app.py b/app.py
index ba920d2..cb989b1 100644
--- a/app.py
+++ b/app.py
@@ -1,22 +1,144 @@
 import streamlit as st
+import os
+from datetime import datetime
 from utils.git_utils import get_changed_files, get_file_diff
 from utils.llm_utils import suggest_test_changes
 from utils.test_runner import run_tests
 
 st.title("🤖 AI Test Automation Tool")
 
+# 1. Git Repo Path
 repo_path = st.text_input("Enter Git Repo Path", value="./")
 
+# 2. Detect Git Changes
 if st.button("Detect Changes"):
     files = get_changed_files(repo_path)
+
+    if not files:
+        st.info("✅ No changes detected.")
+    else:
+        st.session_state["detected_files"] = files
+        st.success(f"🔍 Found {len(files)} changed file(s)")
+
+# Display detected files and handle suggestions
+if "detected_files" in st.session_state:
+    files = st.session_state["detected_files"]
+    
     for f in files:
-        st.write(f"📄 {f}")
+        st.write(f"📄 **Changed File:** `{f}`")
+        
+        # Show the diff
         diff = get_file_diff(repo_path, f)
-        st.code(diff, language="diff")
-        if st.button(f"Suggest Test Updates for {f}"):
-            suggestions = suggest_test_changes(f, diff)
+        with st.expander(f"View diff for {f}"):
+            st.code(diff, language="diff")
+
+        # Suggest Test Button
+        suggest_btn_key = f"suggest_{f}"
+        
+        if st.button(f"🔮 Generate Test Cases for {f}", key=suggest_btn_key):
+            with st.spinner(f"Generating test suggestions for {f}..."):
+                suggestions = suggest_test_changes(f, diff)
+                st.session_state[f"suggestions_{f}"] = suggestions
+
+        # If suggestion exists, show it and confirm option
+        if f"suggestions_{f}" in st.session_state:
+            suggestions = st.session_state[f"suggestions_{f}"]
+            
+            st.subheader(f"💡 Suggested Test Cases for `{f}`:")
             st.code(suggestions, language="python")
 
-if st.button("Run Tests"):
-    output = run_tests(repo_path)
-    st.code(output)
\ No newline at end of file
+            # Create two columns for buttons
+            col1, col2 = st.columns(2)
+            
+            with col1:
+                confirm_btn_key = f"confirm_{f}"
+                if st.button(f"✅ Accept & Save Test Cases", key=confirm_btn_key):
+                    # Check if suggestions contain valid test functions
+                    if "def test_" in suggestions and not suggestions.startswith("Error"):
+                        # Create test file name based on original file
+                        base_name = os.path.splitext(f)[0]
+                        test_file_name = f"test_{base_name}.py"
+                        test_file_path = os.path.join(repo_path, "tests", test_file_name)
+                        
+                        # Ensure tests directory exists
+                        os.makedirs(os.path.join(repo_path, "tests"), exist_ok=True)
+                        
+                        # # Write the test file
+                        # with open(test_file_path, "w") as file:
+                        #     file.write(suggestions)
+
+                        # Let user choose where to save test files
+                        test_directory = st.text_input("Test Directory", value="tests")
+
+                        # Then in your file creation code:
+                        test_file_path = os.path.join(repo_path, test_directory, test_file_name)
+
+                        # Ensure the directory exists
+                        os.makedirs(os.path.dirname(test_file_path), exist_ok=True)
+
+                        # Write the test file
+                        with open(test_file_path, "w", encoding="utf-8") as file:
+                            file.write(suggestions)
+
+                        # Show full absolute path
+                        st.success(f"✅ Test file created at: `{os.path.abspath(test_file_path)}`")
+                        
+                        # Execute the tests
+                        st.info(f"🧪 Running tests for {test_file_name}...")
+                        test_results = run_tests(test_file_path)
+                        
+                        # Log everything
+                        with open("test_update_log.txt", "a", encoding="utf-8") as log_file:
+                            log_file.write(f"\n{'='*60}\n")
+                            log_file.write(f"Test Generation Log - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
+                            log_file.write(f"{'='*60}\n")
+                            log_file.write(f"Original File: {f}\n")
+                            log_file.write(f"Test File Created: {test_file_name}\n")
+                            log_file.write(f"Test File Path: {test_file_path}\n")
+                            log_file.write(f"\nCode Diff:\n{'-'*30}\n{diff}\n")
+                            log_file.write(f"\nGenerated Test Cases:\n{'-'*30}\n{suggestions}\n")
+                            log_file.write(f"\nTest Execution Results:\n{'-'*30}\n{test_results}\n")
+                            log_file.write(f"{'='*60}\n")
+                        
+                        # Show results in UI
+                        st.success(f"✅ Test file '{test_file_name}' created and executed!")
+                        st.subheader("🧪 Test Execution Results:")
+                        st.code(test_results)
+                        
+                        # Clear the suggestion from session state
+                        del st.session_state[f"suggestions_{f}"]
+                        
+                    else:
+                        st.error("⚠️ Invalid test cases generated. Please try again.")
+            
+            with col2:
+                reject_btn_key = f"reject_{f}"
+                if st.button(f"❌ Reject Suggestions", key=reject_btn_key):
+                    del st.session_state[f"suggestions_{f}"]
+                    st.info("Suggestions rejected.")
+
+        st.divider()
+
+# 3. Run All Tests (Optional - run all existing tests)
+st.subheader("🧪 Test Execution")
+col1, col2 = st.columns(2)
+
+with col1:
+    if st.button("Run All Tests"):
+        test_path = os.path.join(repo_path, "tests")
+        if os.path.exists(test_path):
+            result = run_tests(test_path)
+            st.subheader("📊 All Test Results:")
+            st.code(result)
+        else:
+            st.warning("No tests directory found.")
+
+with col2:
+    if st.button("View Test Log"):
+        if os.path.exists("test_update_log.txt"):
+            with open("test_update_log.txt", "r") as log_file:
+                log_content = log_file.read()
+            st.subheader("📋 Test Update Log:")
+            st.text_area("Log Content", log_content, height=400)
+        else:
+            st.info("No log file found yet.")
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest
import os
from datetime import datetime
from utils.git_utils import get_changed_files, get_file_diff
from utils.llm_utils import suggest_test_changes
from utils.test_runner import run_tests

def test_detect_changes(repo_path):
    files = get_changed_files(repo_path)
    assert len(files) == 1

def test_show_detected_files(repo_path):
    files = get_changed_files(repo_path)
    assert "detected_files" in pytest session.state

def test_suggest_test_updates(repo_path):
    suggestions = suggest_test_changes("test_file", get_file_diff(repo_path, "test_file"))
    assert isinstance(suggestions, str)

def test_confirm_test_cases(repo_path):
    test_file_name = "test_file"
    base_name = os.path.splitext(test_file_name)[0]
    test_file_path = os.path.join(repo_path, "tests", f"test_{base_name}.py")
    test_directory = "tests"
    
    with pytest.raises(FileNotFoundError):
        os.makedirs(os.path.dirname(test_file_path), exist_ok=True)

def test_run_all_tests(repo_path):
    run_all_tests = lambda: run_tests("path/to/tests")
    run_all_tests()

def test_view_test_log():
    log_content = "Test Update Log content"
    
    with pytest.raises(FileNotFoundError):
        open("test_update_log.txt", "r")

def test_get_changed_files_empty():
    files = get_changed_files(repo_path)
    assert not files

def test_get_file_diff():
    pass

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_____________________ ERROR collecting tests/test_app.py ______________________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_app.py", line 14
E       assert "detected_files" in pytest session.state
E                                         ^^^^^^^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_app.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 15:40:29
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..7fcb2b9 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,22 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert math.prod([2, 3, 4]) == 24  # Using math.prod for multiplication
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest
import math

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert 2  3  4 == 24

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_string_formatting():
    assert str(5).zfill(6) == "000005"

def test_float_precision():
    assert round(0.12345, 2) == 0.13

def test_list_sorting():
    my_list = [4, 2, 1]
    my_list.sort()
    assert my_list == [1, 2, 4]

def test_dict_iteration():
    my_dict = {"a": 1, "b": 2}
    for key in my_dict:
        assert key in my_dict

def test_function_calling():
    def greet(name):
        return f"Hello, {name}!"

    assert greet("Alice") == "Hello, Alice!"

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 11
E       assert 2  3  4 == 24
E                 ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.11s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-13 15:41:42
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..7fcb2b9 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,22 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert math.prod([2, 3, 4]) == 24  # Using math.prod for multiplication
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest
import math

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert math.prod([2, 3, 4]) == 24

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

@pytest.mark.parametrize("a, b, expected", [
    ((1, 2), (3, 4), 5),
    ((-1, -2), (-3, -4), 7)
])
def test_multiplication_parametrized(a, b, expected):
    assert a[0]  a[1] == expected

@pytest.mark.parametrize("a, b", [
    (10, 2),
    (-5, -3),
    (1, -2)
])
def test_division_parametrized(a, b):
    assert a / b == pytest.approx(5)

def test_list_multiplication():
    my_list = [1, 2]
    result = [x  y for x, y in zip(my_list, my_list)]
    assert result == [1, 4]

def test_dict_multiplication():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {'c': 3, 'd': 4}
    result = {key: value  other_value for key, value in dict1.items() for other_key, other_value in dict2.items()}
    assert len(result) == 8
    for key, value in result.items():
        if key in dict1 and key in dict2:
            assert value == dict1[key]  dict2[key]

def test_set_multiplication():
    set1 = {1, 2}
    set2 = {3, 4}
    result = {x  y for x in set1 for y in set2}
    assert len(result) == 8
    for value in result:
        if value % 2 == 0:
            assert value // 2 in set1

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 29
E       assert a[0]  a[1] == expected
E                    ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================

============================================================

============================================================
Test Generation Log - 2025-06-16 12:44:11
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2
    assert 3  4 == 12

def test_subtraction():
    assert 5 - 3 == 2
    assert 7  2 == 14

def test_multiplication():
    assert 9  6 == 54
    assert 2  11 == 22

def test_division():
    assert 10 / 2 == 5
    assert 8  3 == 24

Test Execution Results:
------------------------------

C:\Users\NSH43\AppData\Local\Programs\Python\Python312\python.exe: No module named pytest

============================================================

============================================================
Test Generation Log - 2025-06-16 12:46:19
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 1 - 1 == 0

def test_multiplication():
    assert 5  5 == 25

def test_division():
    assert 10 / 2 == 5

def test_modulus():
    assert 17 % 5 == 2

def test_exponentiation():
    assert 2  3 == 8

def test_power():
    assert 2  '3' == 8

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 10
E       assert 5  5 == 25
E                 ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 12:57:22
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..7fcb2b9 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,22 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+def test_multiplication():
+    assert math.prod([2, 3, 4]) == 24  # Using math.prod for multiplication
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import math
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_multiplication():
    assert 2  3  4 == 24

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_dict_update():
    original_dict = {'a': 1, 'b': 2}
    new_key = 'c'
    updated_value = 3
    original_dict.update({new_key: updated_value})
    assert original_dict == {'a': 1, 'b': 2, new_key: updated_value}

def test_list_remove():
    my_list = [1, 2, 3]
    element_to_remove = 2
    new_list = my_list.copy()
    new_list.remove(element_to_remove)
    assert new_list == [1, 3]

def test_list_sort():
    my_list = [4, 2, 7, 1, 9]
    sorted_list = sorted(my_list)
    assert sorted_list == [1, 2, 4, 7, 9]

def test_set_addition():
    original_set = {1, 2, 3}
    new_element = 4
    updated_set = original_set.union({new_element})
    assert list(updated_set) == [1, 2, 3, 4]

def test_set_remove():
    my_set = {1, 2, 3}
    element_to_remove = 2
    updated_set = my_set.copy()
    updated_set.discard(element_to_remove)
    assert list(updated_set) == [1, 3]

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 11
E       assert 2  3  4 == 24
E                 ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 13:02:11
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import math
import pytest

@pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
def test_addition(a, b, c):
    assert a + b == c

@pytest.mark.parametrize("a,b,c", [(-5, -3, 0), (5, -3, 8)])
def test_subtraction(a, b, c):
    assert a - b == c

@pytest.mark.parametrize("a,b", [(10, 2), (15, 4)])
def test_division(a, b):
    assert math.floor(a / b) == math.ceil(b / a)

@pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi,", " There!")])
def test_string_concatenation(s1, s2):
    assert s1 + s2 == "Hello, World!"

@pytest.mark.parametrize("lst, item", [( [1, 2, 3], 4), ([10, 20, 30], 5)])
def test_list_append(lst, item):
    lst.append(item)
    assert lst == lst.copy() + [item]

@pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi,", " There!")])
def test_string_concatenation_2(s1, s2):
    assert s1 + s2 == s2 + s1

def test_division_by_zero():
    with pytest.raises(ZeroDivisionError):
        10 / 0

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 13 items

tests\test_tests\test_sample.py .FF.FF.FFFFF.                            [100%]

================================== FAILURES ===================================
____________________________ test_addition[4-5-6] _____________________________

a = 4, b = 5, c = 6

    @pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
    def test_addition(a, b, c):
>       assert a + b == c
E       assert (4 + 5) == 6

tests\test_tests\test_sample.py:6: AssertionError
__________________________ test_subtraction[-5--3-0] __________________________

a = -5, b = -3, c = 0

    @pytest.mark.parametrize("a,b,c", [(-5, -3, 0), (5, -3, 8)])
    def test_subtraction(a, b, c):
>       assert a - b == c
E       assert (-5 - -3) == 0

tests\test_tests\test_sample.py:10: AssertionError
_____________________________ test_division[10-2] _____________________________

a = 10, b = 2

    @pytest.mark.parametrize("a,b", [(10, 2), (15, 4)])
    def test_division(a, b):
>       assert math.floor(a / b) == math.ceil(b / a)
E       assert 5 == 1
E        +  where 5 = <built-in function floor>((10 / 2))
E        +    where <built-in function floor> = math.floor
E        +  and   1 = <built-in function ceil>((2 / 10))
E        +    where <built-in function ceil> = math.ceil

tests\test_tests\test_sample.py:14: AssertionError
_____________________________ test_division[15-4] _____________________________

a = 15, b = 4

    @pytest.mark.parametrize("a,b", [(10, 2), (15, 4)])
    def test_division(a, b):
>       assert math.floor(a / b) == math.ceil(b / a)
E       assert 3 == 1
E        +  where 3 = <built-in function floor>((15 / 4))
E        +    where <built-in function floor> = math.floor
E        +  and   1 = <built-in function ceil>((4 / 15))
E        +    where <built-in function ceil> = math.ceil

tests\test_tests\test_sample.py:14: AssertionError
___________________ test_string_concatenation[Hi,- There!] ____________________

s1 = 'Hi,', s2 = ' There!'

    @pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi,", " There!")])
    def test_string_concatenation(s1, s2):
>       assert s1 + s2 == "Hello, World!"
E       AssertionError: assert 'Hi, There!' == 'Hello, World!'
E         
E         - Hello, World!
E         + Hi, There!

tests\test_tests\test_sample.py:18: AssertionError
__________________________ test_list_append[lst0-4] ___________________________

lst = [1, 2, 3, 4], item = 4

    @pytest.mark.parametrize("lst, item", [( [1, 2, 3], 4), ([10, 20, 30], 5)])
    def test_list_append(lst, item):
        lst.append(item)
>       assert lst == lst.copy() + [item]
E       assert [1, 2, 3, 4] == [1, 2, 3, 4, 4]
E         
E         Right contains one more item: 4
E         Use -v to get more diff

tests\test_tests\test_sample.py:23: AssertionError
__________________________ test_list_append[lst1-5] ___________________________

lst = [10, 20, 30, 5], item = 5

    @pytest.mark.parametrize("lst, item", [( [1, 2, 3], 4), ([10, 20, 30], 5)])
    def test_list_append(lst, item):
        lst.append(item)
>       assert lst == lst.copy() + [item]
E       assert [10, 20, 30, 5] == [10, 20, 30, 5, 5]
E         
E         Right contains one more item: 5
E         Use -v to get more diff

tests\test_tests\test_sample.py:23: AssertionError
_________________ test_string_concatenation_2[Hello, -World!] _________________

s1 = 'Hello, ', s2 = 'World!'

    @pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi,", " There!")])
    def test_string_concatenation_2(s1, s2):
>       assert s1 + s2 == s2 + s1
E       AssertionError: assert 'Hello, World!' == 'World!Hello, '
E         
E         - World!Hello, 
E         + Hello, World!

tests\test_tests\test_sample.py:27: AssertionError
__________________ test_string_concatenation_2[Hi,- There!] ___________________

s1 = 'Hi,', s2 = ' There!'

    @pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi,", " There!")])
    def test_string_concatenation_2(s1, s2):
>       assert s1 + s2 == s2 + s1
E       AssertionError: assert 'Hi, There!' == ' There!Hi,'
E         
E         -  There!Hi,
E         + Hi, There!

tests\test_tests\test_sample.py:27: AssertionError
=========================== short test summary info ===========================
FAILED tests/test_tests/test_sample.py::test_addition[4-5-6] - assert (4 + 5)...
FAILED tests/test_tests/test_sample.py::test_subtraction[-5--3-0] - assert (-...
FAILED tests/test_tests/test_sample.py::test_division[10-2] - assert 5 == 1
FAILED tests/test_tests/test_sample.py::test_division[15-4] - assert 3 == 1
FAILED tests/test_tests/test_sample.py::test_string_concatenation[Hi,- There!]
FAILED tests/test_tests/test_sample.py::test_list_append[lst0-4] - assert [1,...
FAILED tests/test_tests/test_sample.py::test_list_append[lst1-5] - assert [10...
FAILED tests/test_tests/test_sample.py::test_string_concatenation_2[Hello, -World!]
FAILED tests/test_tests/test_sample.py::test_string_concatenation_2[Hi,- There!]
========================= 9 failed, 4 passed in 0.06s =========================


============================================================

============================================================
Test Generation Log - 2025-06-16 13:15:17
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest

@pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
def test_addition(a, b, c):
    assert a + b + c == 10

@pytest.mark.parametrize("a,b", [(5, 3), (8, 7)])
def test_subtraction(a, b):
    assert a - b == 2

@pytest.mark.parametrize("a,b", [(10, 2), (15, 5)])
def test_division(a, b):
    assert a / b == 5

@pytest.mark.parametrize("s1,s2", [("Hello, ", "World!"), ("Hi, ", "How are you?")])
def test_string_concatenation(s1, s2):
    assert s1 + s2 == "Hello, World!" or "Hi, How are you?"

@pytest.mark.parametrize("my_list, expected", [
    ([1, 2, 3], [1, 2, 3]),
    ([4, 5, 6], [4, 5, 6])
])
def test_list_append(my_list, expected):
    my_list.append(4)
    assert my_list == expected

@pytest.mark.parametrize("my_list, element", [
    ([1, 2, 3], 4),
    ([4, 5, 6], 7)
])
def test_list_append_element(my_list, element):
    my_list.append(element)
    assert len(my_list) > 1

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 12 items

tests\test_tests\test_sample.py FF.F.F..FF..                             [100%]

================================== FAILURES ===================================
____________________________ test_addition[1-2-3] _____________________________

a = 1, b = 2, c = 3

    @pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
    def test_addition(a, b, c):
>       assert a + b + c == 10
E       assert ((1 + 2) + 3) == 10

tests\test_tests\test_sample.py:5: AssertionError
____________________________ test_addition[4-5-6] _____________________________

a = 4, b = 5, c = 6

    @pytest.mark.parametrize("a,b,c", [(1, 2, 3), (4, 5, 6)])
    def test_addition(a, b, c):
>       assert a + b + c == 10
E       assert ((4 + 5) + 6) == 10

tests\test_tests\test_sample.py:5: AssertionError
____________________________ test_subtraction[8-7] ____________________________

a = 8, b = 7

    @pytest.mark.parametrize("a,b", [(5, 3), (8, 7)])
    def test_subtraction(a, b):
>       assert a - b == 2
E       assert (8 - 7) == 2

tests\test_tests\test_sample.py:9: AssertionError
_____________________________ test_division[15-5] _____________________________

a = 15, b = 5

    @pytest.mark.parametrize("a,b", [(10, 2), (15, 5)])
    def test_division(a, b):
>       assert a / b == 5
E       assert (15 / 5) == 5

tests\test_tests\test_sample.py:13: AssertionError
____________________ test_list_append[my_list0-expected0] _____________________

my_list = [1, 2, 3, 4], expected = [1, 2, 3]

    @pytest.mark.parametrize("my_list, expected", [
        ([1, 2, 3], [1, 2, 3]),
        ([4, 5, 6], [4, 5, 6])
    ])
    def test_list_append(my_list, expected):
        my_list.append(4)
>       assert my_list == expected
E       assert [1, 2, 3, 4] == [1, 2, 3]
E         
E         Left contains one more item: 4
E         Use -v to get more diff

tests\test_tests\test_sample.py:25: AssertionError
____________________ test_list_append[my_list1-expected1] _____________________

my_list = [4, 5, 6, 4], expected = [4, 5, 6]

    @pytest.mark.parametrize("my_list, expected", [
        ([1, 2, 3], [1, 2, 3]),
        ([4, 5, 6], [4, 5, 6])
    ])
    def test_list_append(my_list, expected):
        my_list.append(4)
>       assert my_list == expected
E       assert [4, 5, 6, 4] == [4, 5, 6]
E         
E         Left contains one more item: 4
E         Use -v to get more diff

tests\test_tests\test_sample.py:25: AssertionError
=========================== short test summary info ===========================
FAILED tests/test_tests/test_sample.py::test_addition[1-2-3] - assert ((1 + 2...
FAILED tests/test_tests/test_sample.py::test_addition[4-5-6] - assert ((4 + 5...
FAILED tests/test_tests/test_sample.py::test_subtraction[8-7] - assert (8 - 7...
FAILED tests/test_tests/test_sample.py::test_division[15-5] - assert (15 / 5)...
FAILED tests/test_tests/test_sample.py::test_list_append[my_list0-expected0]
FAILED tests/test_tests/test_sample.py::test_list_append[my_list1-expected1]
========================= 6 failed, 6 passed in 0.05s =========================


============================================================

============================================================
Test Generation Log - 2025-06-16 15:04:25
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest
import math

@pytest.mark.parametrize("a, b, expected", [(1, 1, 2), (3, 4, 7)])
def test_addition(a, b, expected):
    assert a + b == expected

@pytest.mark.parametrize("a, b, expected", [(5, 3, 2), (10, 2, 5)])
def test_subtraction(a, b, expected):
    assert a - b == expected

@pytest.mark.parametrize("a, b, expected", [(10, 2, 5), (15, 5, 3)])
def test_division(a, b, expected):
    assert a / b == expected

@pytest.mark.parametrize("s1, s2, expected", [("Hello, ", "World!"), ("Hi, ", "How are you!")])
def test_string_concatenation(s1, s2, expected):
    assert s1 + s2 == expected

@pytest.mark.parametrize("lst, element, expected", [[1, 2, 3], (4,), ([5, 6],)])
def test_list_append(lst, element, expected):
    lst.append(element)
    assert lst == expected

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
tests/test_tests/test_sample.py::test_string_concatenation: in "parametrize" the number of names (3):
  ['s1', 's2', 'expected']
must be equal to the number of values (2):
  ('Hello, ', 'World!')
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py - Failed: tests/test_tests/test_sample....
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 15:33:43
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest
import math

def test_addition():
    assert 1 + 1 == 2
    assert 5 + 3 == 8
    assert 10 + 20 == 30

def test_subtraction():
    assert 5 - 3 == 2
    assert 10 - 4 == 6
    assert 15 - 9 == 6

def test_division():
    assert 10 / 2 == 5
    assert 15 / 3 == 5
    assert 20 / 4 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"
    assert "Python " + "Programming" == "Python Programming"
    assert "Test " + "Case" == "Test Case"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_list_addition():
    list1 = [1, 2, 3]
    list2 = [4, 5, 6]
    assert list1 + list2 == [1, 2, 3, 4, 5, 6]

def test_list_removal():
    my_list = [1, 2, 3, 4, 5]
    my_list.remove(3)
    assert my_list == [1, 2, 4, 5]

def test_list_sorting():
    my_list = [64, 34, 25, 12, 22, 11, 90]
    sorted_list = sorted(my_list)
    assert sorted_list == [11, 12, 22, 25, 34, 64, 90]

def test_tuple_creation():
    t1 = (1, 2, 3)
    t2 = (4, 5, 6)
    assert len(t1 + t2) == 9

def test_set_operations():
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    assert set1 | set2 == {1, 2, 3, 4, 5}

def test_set_difference():
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    assert set1 - set2 == {1, 2}

def test_set_intersection():
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    assert set1 & set2 == {3}

def test_set_symmetric_difference():
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    assert set1 ^ set2 == {1, 2, 4, 5}

def test_math_functions():
    assert math.sin(0) == 0
    assert math.cos(math.pi/2) == 1
    assert math.sqrt(16) == 4

def test_string_methods():
    s = "Hello"
    assert s.count("l") == 2
    assert s.upper() == "HELLO"

def test_list comprehensions():
    my_list = [x for x in range(10)]
    assert len(my_list) == 10
    assert all(x % 2 == 0 for x in my_list)

def test_mapping():
    numbers = [1, 2, 3]
    squared_numbers = list(map(lambda x: x2, numbers))
    assert sorted(squared_numbers) == [1, 4, 9]

def test_filtering():
    numbers = [1, 2, 3, 4, 5]
    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
    assert sorted(even_numbers) == [2, 4]

def test_reduce():
    from functools import reduce
    numbers = [1, 2, 3, 4, 5]
    product = reduce(lambda x, y: xy, numbers)
    assert product == 120

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 79
E       def test_list comprehensions():
E                     ^^^^^^^^^^^^^^
E   SyntaxError: expected '('
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.13s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 16:02:26
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests_test_sample.py
Test File Path: ./tests\test_tests_test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_list_remove():
    my_list = [1, 2, 3]
    my_list.remove(2)
    assert my_list == [1, 3]

def test_list_sort():
    my_list = [3, 1, 2]
    my_list.sort()
    assert my_list == [1, 2, 3]

def test_dict_addition():
    d1 = {"a": 1, "b": 2}
    d2 = {"c": 3, "d": 4}
    result = {d1, d2}
    assert result == {"a": 1, "b": 2, "c": 3, "d": 4}

def test_dict_removal():
    d1 = {"a": 1, "b": 2}
    del d1["a"]
    assert d1 == {"b": 2}

def test_set_addition():
    s1 = {1, 2, 3}
    s2 = {3, 4, 5}
    result = s1 | s2
    assert result == {1, 2, 3, 4, 5}

def test_set_removal():
    s1 = {1, 2, 3}
    s1.remove(2)
    assert s1 == {1, 3}

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 11 items

tests\test_tests_test_sample.py .......F...                              [100%]

================================== FAILURES ===================================
_____________________________ test_dict_addition ______________________________

    def test_dict_addition():
        d1 = {"a": 1, "b": 2}
        d2 = {"c": 3, "d": 4}
>       result = {d1, d2}
                 ^^^^^^^^
E       TypeError: unhashable type: 'dict'

tests\test_tests_test_sample.py:33: TypeError
=========================== short test summary info ===========================
FAILED tests/test_tests_test_sample.py::test_dict_addition - TypeError: unhas...
======================== 1 failed, 10 passed in 0.05s =========================


============================================================

============================================================
Test Generation Log - 2025-06-16 16:06:03
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests_test_sample.py
Test File Path: ./tests\test_tests_test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import math
import pytest

def test_addition():
    assert 1 + 1 == 2
    assert 5 + 5 == 10
    assert 0 + 0 == 0

def test_subtraction():
    assert 5 - 3 == 2
    assert 10 - 4 == 6
    assert -5 - (-3) == -2

def test_division():
    assert 10 / 2 == 5
    assert 7 / 1 == 7
    assert 0 / 0 == math.inf

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"
    assert "Python" + " programming" == "Python programming"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_string_formatting():
    name = "John"
    age = 30
    assert f"My name is {name} and I am {age} years old" == "My name is John and I am 30 years old"

def test_list_indexing():
    my_list = [1, 2, 3]
    assert my_list[0] == 1
    assert my_list[-1] == 3

def test_set_operations():
    set1 = {1, 2, 3}
    set2 = {3, 4, 5}
    assert set1 & set2 == {3}
    assert set1 | set2 == {1, 2, 3, 4, 5}

def test_nested_loops():
    for i in range(1, 4):
        for j in range(1, 4):
            assert (i, j) not in {(1, 1), (2, 2)}

def test_function_call():
    def greet(name):
        return f"Hello, {name}!"

    assert greet("John") == "Hello, John!"
    assert greet("") == "Hello, !"

def test_class_method():
    class MyClass:
        count = 0

        def increment(self):
            self.count += 1

    obj = MyClass()
    obj.increment()
    assert MyClass.count == 1

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 11 items

tests\test_tests_test_sample.py ..F.....F.F                              [100%]

================================== FAILURES ===================================
________________________________ test_division ________________________________

    def test_division():
        assert 10 / 2 == 5
        assert 7 / 1 == 7
>       assert 0 / 0 == math.inf
               ^^^^^
E       ZeroDivisionError: division by zero

tests\test_tests_test_sample.py:17: ZeroDivisionError
______________________________ test_nested_loops ______________________________

    def test_nested_loops():
        for i in range(1, 4):
            for j in range(1, 4):
>               assert (i, j) not in {(1, 1), (2, 2)}
E               assert (1, 1) not in {(1, 1), (2, 2)}

tests\test_tests_test_sample.py:47: AssertionError
______________________________ test_class_method ______________________________

    def test_class_method():
        class MyClass:
            count = 0
    
            def increment(self):
                self.count += 1
    
        obj = MyClass()
        obj.increment()
>       assert MyClass.count == 1
E       AssertionError: assert 0 == 1
E        +  where 0 = <class 'AI_Test_Automation_tool.tests.test_tests_test_sample.test_class_method.<locals>.MyClass'>.count

tests\test_tests_test_sample.py:65: AssertionError
=========================== short test summary info ===========================
FAILED tests/test_tests_test_sample.py::test_division - ZeroDivisionError: di...
FAILED tests/test_tests_test_sample.py::test_nested_loops - assert (1, 1) not...
FAILED tests/test_tests_test_sample.py::test_class_method - AssertionError: a...
========================= 3 failed, 8 passed in 0.05s =========================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:03:22
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests_test_sample.py
Test File Path: ./tests\test_tests_test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
index fc0f97d..3ed8884 100644
--- a/tests/test_sample.py
+++ b/tests/test_sample.py
@@ -1,2 +1,21 @@
+import math
+
 def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file
+    assert 1 + 1 == 2
+
+def test_subtraction():
+    assert 5 - 3 == 2
+
+
+
+def test_division():
+    assert 10 / 2 == 5
+
+def test_string_concatenation():
+    assert "Hello, " + "World!" == "Hello, World!"
+
+def test_list_append():
+    my_list = [1, 2, 3]
+    my_list.append(4)
+    assert my_list == [1, 2, 3, 4]
+

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_subtraction():
    assert 5 - 3 == 2

def test_division():
    assert 10 / 2 == 5

def test_string_concatenation():
    assert "Hello, " + "World!" == "Hello, World!"

def test_list_append():
    my_list = [1, 2, 3]
    my_list.append(4)
    assert my_list == [1, 2, 3, 4]

def test_string_replication():
    assert "abc"  3 == "abcabc"

def test_list_repeat():
    my_list = [1, 2, 3]
    my_list = 3
    assert my_list == [1, 2, 3, 1, 2, 3, 1, 2, 3]

def test_tuple_concatenation():
    assert (1, 2) + (3, 4) == (1, 2, 3, 4)

def test_dict_merge():
    dict1 = {'a': 1, 'b': 2}
    dict2 = {'c': 3, 'd': 4}
    assert {dict1, dict2} == {'a': 1, 'b': 2, 'c': 3, 'd': 4}

def test_set_diff():
    set1 = {1, 2, 3}
    set2 = {2, 3, 4}
    assert set1 - set2 == {1}

def test_list_indexing():
    my_list = [1, 2, 3]
    assert my_list[0] == 1
    assert my_list[-1] == 3

def test_string_slicing():
    string = "Hello"
    assert string[:2] == 'He'
    assert string[7:] == ''

def test_int_abs():
    assert abs(-10) == 10

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests_test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests_test_sample.py", line 21
E       assert "abc"  3 == "abcabc"
E                     ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests_test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:07:08
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests_test_sample.py
Test File Path: ./tests\test_tests_test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    assert 1 + 1 == 2

def test_division_by_zero():
    with pytest.raises(ZeroDivisionError):
        1 / 0

def test_negative_numbers():
    assert -1 + 1 == 0

def test_float_addition():
    assert 0.5 + 0.3 == 0.8

def test_mixed_types_addition():
    assert 2 + 'hello' != 2 + 'world'

def test_list_addition():
    list1 = [1, 2]
    list2 = [3, 4]
    assert list1 + list2 == [1, 2, 3, 4]

def test_set_addition():
    s1 = set([1, 2])
    s2 = set([3, 4])
    assert s1 | s2 == {1, 2, 3, 4}

def test_dict_addition():
    d1 = {'a': 1}
    d2 = {'b': 2}
    assert d1 | d2 == {'a': 1, 'b': 2}

def test_list_comprehension():
    numbers = [1, 2, 3]
    squared_numbers = [n2 for n in numbers]
    assert squared_numbers == [1, 4, 9]

def test_set_comprehension():
    numbers = {1, 2, 3}
    odd_numbers = {n for n in numbers if n % 2 != 0}
    assert odd_numbers == {1, 3}

def test_dict_comprehension():
    numbers = {'a': 1, 'b': 2, 'c': 3}
    doubled_values = {k: v  2 for k, v in numbers.items()}
    assert doubled_values == {'a': 2, 'b': 4, 'c': 6}

def test_function_with_args():
    def multiply(a, b):
        return a  b

    assert multiply(2, 3) == 6

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests_test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests_test_sample.py", line 46
E       doubled_values = {k: v  2 for k, v in numbers.items()}
E                            ^^^^
E   SyntaxError: invalid syntax. Perhaps you forgot a comma?
=========================== short test summary info ===========================
ERROR tests/test_tests_test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:16:42
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    # Valid Inputs
    def valid_addition():
        assert addition(1, 1) == 2
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(TypeError):
            addition("a", 1)
    # Boundary Cases
    def boundary_cases():
        assert addition(-1, 1) == 0
        assert addition(1, -1) == 0

def test_subtraction():
    # Valid Inputs
    def valid_subtraction():
        assert subtraction(2, 1) == 1
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(TypeError):
            subtraction("a", 1)
    # Boundary Cases
    def boundary_cases():
        assert subtraction(-1, 1) == -2
        assert subtraction(1, -1) == 2

def test_multiplication():
    # Valid Inputs
    def valid_multiplication():
        assert multiplication(2, 3) == 6
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(TypeError):
            multiplication("a", 3)
    # Boundary Cases
    def boundary_cases():
        assert multiplication(-1, 3) == -3
        assert multiplication(3, -1) == -3

def test_division():
    # Valid Inputs
    def valid_division():
        assert division(4, 2) == 2
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(TypeError):
            division("a", 2)
    # Boundary Cases
    def boundary_cases():
        assert division(-4, 2) == -2
        assert division(4, -2) == -2

def test_addition_error_message():
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(ValueError):
            addition("a", "b")

def test_subtraction_error_message():
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(ValueError):
            subtraction("a", "b")

def test_multiplication_error_message():
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(ValueError):
            multiplication("a", 3)

def test_division_error_message():
    # Invalid Inputs
    def invalid_input_type():
        with pytest.raises(ValueError):
            division(4, "b")

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 8 items

tests\test_tests\test_sample.py ........                                 [100%]

============================== 8 passed in 0.02s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:18:13
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    # Valid Inputs
    valid_inputs = [
        (1, 1),
        (5, 10),
        (-3, -7)
    ]

    for input in valid_inputs:
        expected_result = input[0] + input[1]
        assert expected_result == addition(input[0], input[1])

    # Invalid Inputs
    invalid_inputs = [
        ([], [1, 2]),
        ('a', 'b'),
        (None, None)
    ]

    for input in invalid_inputs:
        with pytest.raises(TypeError):
            addition(input)

    # Boundary Cases
    boundary_cases = [
        (-1000, 1000),
        (50000, 500000),
        (1000.5, 2),
        ('abc', 'def')
    ]

    for input in boundary_cases:
        expected_result = float(input[0]) + float(input[1])
        assert expected_result == addition(input)

    # Error Handling
    error_handling = [
        ([], [1, 2]),
        ('a', 'b'),
        (None, None)
    ]

    for input in error_handling:
        with pytest.raises(TypeError):
            addition(input)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 1 item

tests\test_tests\test_sample.py F                                        [100%]

================================== FAILURES ===================================
________________________________ test_addition ________________________________

    def test_addition():
        # Valid Inputs
        valid_inputs = [
            (1, 1),
            (5, 10),
            (-3, -7)
        ]
    
        for input in valid_inputs:
            expected_result = input[0] + input[1]
>           assert expected_result == addition(input[0], input[1])
                                      ^^^^^^^^
E           NameError: name 'addition' is not defined

tests\test_tests\test_sample.py:13: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/test_sample.py::test_addition - NameError: name 'addi...
============================== 1 failed in 0.04s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:18:34
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    # Valid Inputs:
    #   Test addition of two positive integers.
    def test_add_positive_integers():
        result = addition(3, 4)
        assert result == 7

    #   Test addition of two negative integers.
    def test_add_negative_integers():
        result = addition(-5, -6)
        assert result == -11

    #   Test addition of positive and negative integer pairs.
    def test_add_positive_negative_pairs():
        result = addition(1, -2)
        assert result == -1

    # Invalid Inputs:
    #   Test invalid input type (non-integer).
    def test_invalid_input_type():
        with pytest.raises(TypeError):
            addition("five", 3)

    # Boundary Cases:
    #   Test addition of two positive integers at boundary value.
    def test_add_positive_integers_at_boundary_value():
        result = addition(1, 999)
        assert result == 1000

    # Error Handling:
    #   Simulate division by zero error.
    def test_division_by_zero_error():
        with pytest.raises(ValueError):
            addition(5, 0)

    # Return Values:
    #   Test addition of two integers with different signs.
    def test_addition_with_different_signs():
        result = addition(-4, -6)
        assert result == -10

    # Performance Testing:
    #   Evaluate performance under heavy load with large inputs.
    import time
    def test_performance_underHeavyLoad():
        start_time = time.time()
        for i in range(1000000):
            addition(1, 2)
        end_time = time.time()
        assert end_time - start_time < 1

    # State-Based Testing:
    #   Test initial state of addition function.
    def test_initial_state():
        result = addition(0, 0)
        assert result == 0

    # Dependency Testing:
    #   Simulate dependency failure (invalid input).
    def test_dependency_failure():
        with pytest.raises(TypeError):
            addition("invalid_input", 3)

    # Security Testing:
    #   Test for potential SQL injection vulnerability.
    def test_sql_injection_vulnerability():
        result = addition(1, "2' OR '1=1")
        assert result == 3

def addition(a, b):

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 72
E       def addition(a, b):
E                          ^
E   IndentationError: expected an indented block after function definition on line 72
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:19:04
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_functions():
    # Test functions
    def test_addition(a, b):
        expected_result = a + b
        assert expected_result == 3, f"Expected {expected_result} but got {a + b}"

    def test_subtraction(x, y):
        expected_result = x - y
        assert expected_result == 2, f"Expected {expected_result} but got {x - y}"

    def test_multiplication(z, w):
        expected_result = z  w
        assert expected_result == 10, f"Expected {expected_result} but got {z  w}"

    def test_division(c, d):
        if d != 0:
            expected_result = c / d
            assert expected_result == 2.5, f"Expected {expected_result} but got {c / d}"
        else:
            raise ValueError("Division by zero is not allowed")

def test_functions():
    # Test cases for addition function
    test_addition(1, 2)  # Valid input with expected result
    test_addition(-3, -5)  # Valid input with negative numbers
    test_addition(10, 20)  # Valid input with larger numbers
    test_addition('a', 'b')  # Invalid input: non-numeric values
    test_addition(1.0, 2.0)  # Valid input with floating-point numbers

    # Test cases for subtraction function
    test_subtraction(5, 3)  # Valid input with expected result
    test_subtraction(-10, 20)  # Valid input with negative numbers
    test_subtraction(15, -15)  # Valid input with zero
    test_subtraction('a', 'b')  # Invalid input: non-numeric values

    # Test cases for multiplication function
    test_multiplication(4, 5)  # Valid input with expected result
    test_multiplication(-6, -8)  # Valid input with negative numbers
    test_multiplication(15, 0)  # Boundary case: zero multiplier
    test_multiplication('a', 'b')  # Invalid input: non-numeric values

    # Test cases for division function
    test_division(10, 2)  # Valid input with expected result
    test_division(-5, -1)  # Valid input with negative numbers
    test_division(0, 0)  # Boundary case: zero dividend
    test_division(10, 'a')  # Invalid input: non-numeric divisor

    # Test performance
    import timeit
    result = timeit.timeit(lambda: test_addition(1, 2), number=100000)
    assert result < 0.5  # Expected execution time less than 0.5 seconds

def test_functions():
    test_division(10, 'a')  # Test division by zero
    test_division('a', 'b')  # Test division with non-numeric divisor

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 14
E       expected_result = z  w
E                            ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:19:43
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_add_function(valid_inputs):
    for x, y in valid_inputs:
        assert add(x, y) == expected_result(x, y)

def test_add_function_invalid_inputs():
    invalid_inputs = [
        (None, 1),
        (1, None),
        (None, None)
    ]
    for x, y in invalid_inputs:
        with pytest.raises(TypeError):
            add(x, y)

def test_add_function_boundary_cases():
    boundary_cases = [
        (0, 1), (100, 200), (-10, -20)
    ]
    for x, y in boundary_cases:
        assert add(x, y) == expected_result(x, y)

def test_add_function_error_handling():
    error_handling = [
        (1 / 0, ), (float('inf'), )
    ]
    for x in error_handling:
        with pytest.raises(ZeroDivisionError):
            add(x)

@pytest.mark.parametrize("input1, input2", [
    (10, 20),
    (30.5, 40.7),
    ('a', 'b')
])
def test_add_return_value(input1, input2):
    assert add(input1, input2) == expected_result(input1, input2)

@pytest.mark.parametrize("input1", [1000000, -1000000])
def test_add_performance(input1):
    start_time = time.time()
    for _ in range(10000):
        add([input1])
    end_time = time.time()
    assert end_time - start_time < 1

@pytest.mark.parametrize("state1, state2", [
    (True, False),
    (False, True),
    (True, True)
])
def test_add_state_based(state1, state2):
    add_state(state1, state2)

@pytest.mark.parametrize("dependency1, dependency2", [
    ('http://example.com', ),
    ('https://example.net'),
    ()
])
def test_add_dependency(dependency1, dependency2):
    with pytest.raises(ConnectException):
        add([dependency1], dependency2)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
tests/test_tests/test_sample.py::test_add_dependency: in "parametrize" the number of names (2):
  ['dependency1', 'dependency2']
must be equal to the number of values (1):
  ('http://example.com',)
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py - Failed: tests/test_tests/test_sample....
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:20:16
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_sample_function_addition():
    # Valid Inputs
    def test_valid_inputs():
        assert sample_function.addition(1, 1) == 2
        assert sample_function.addition(-1, -1) == -2
        assert sample_function.addition(0, 0) == 0

    # Invalid Inputs
    def test_invalid_inputs():
        with pytest.raises(TypeError):
            sample_function.addition("a", 1)
        with pytest.raises(TypeError):
            sample_function.addition(1, "b")

    # Boundary Cases
    def test_boundary_cases():
        assert sample_function.addition(-1000, -1000) == -2000
        assert sample_function.addition(1000, 1000) == 2000

    # Error Handling
    def test_error_handling():
        with pytest.raises(ZeroDivisionError):
            sample_function.addition(1, 0)

    # Return Values
    def test_return_values():
        assert isinstance(sample_function.get_result(), int)
        assert sample_function.get_result() > 0

def test_sample_function_subtraction():
    # Valid Inputs
    def test_valid_inputs():
        assert sample_function.subtraction(1, 1) == 0
        assert sample_function.subtraction(-1, -1) == 0
        assert sample_function.subtraction(0, 0) == 0

    # Invalid Inputs
    def test_invalid_inputs():
        with pytest.raises(TypeError):
            sample_function.subtraction("a", 1)
        with pytest.raises(TypeError):
            sample_function.subtraction(1, "b")

    # Boundary Cases
    def test_boundary_cases():
        assert sample_function.subtraction(-1000, -1000) == 2000
        assert sample_function.subtraction(1000, 1000) == 0

    # Error Handling
    def test_error_handling():
        with pytest.raises(ZeroDivisionError):
            sample_function.subtraction(1, 0)

    # Return Values
    def test_return_values():
        assert isinstance(sample_function.get_result(), int)
        assert sample_function.get_result() > 0

def test_sample_function_multiplication():
    # Valid Inputs
    def test_valid_inputs():
        assert sample_function.multiplication(1, 1) == 1
        assert sample_function.multiplication(-1, -1) == 1
        assert sample_function.multiplication(0, 0) == 0

    # Invalid Inputs
    def test_invalid_inputs():
        with pytest.raises(TypeError):
            sample_function.multiplication("a", 1)
        with pytest.raises(TypeError):
            sample_function.multiplication(1, "b")

    # Boundary Cases
    def test_boundary_cases():
        assert sample_function.multiplication(-1000, -1000) == 10002
        assert sample_function.multiplication(1000, 1000) == 10001000

    # Error Handling
    def test_error_handling():
        with pytest.raises(ZeroDivisionError):
            sample_function.multiplication(1, 0)

    # Return Values
    def test_return_values():
        assert isinstance(sample_function.get_result(), int)
        assert sample_function.get_result() > 0

def test_sample_function_division():
    # Valid Inputs
    def test_valid_inputs():
        assert sample_function.division(10, 2) == 5
        assert sample_function.division(-10, -2) == 5
        assert sample_function.division(0, 1) == float('inf')

    # Invalid Inputs
    def test_invalid_inputs():
        with pytest.raises(TypeError):
            sample_function.division("a", 1)
        with pytest.raises(TypeError):
            sample_function.division(1, "b")

    # Boundary Cases
    def test_boundary_cases():
        assert sample_function.division(-1000, -1000) == 1000
        assert sample_function.division(1000, 1000) == 1

    # Error Handling
    def test_error_handling():
        with pytest.raises(ZeroDivisionError):
            sample_function.division(1, 0)
        with pytest.raises(ZeroDivisionError):
            sample_function.division(0, 1)

    # Return Values
    def test_return_values():
        assert isinstance(sample_function.get_result(), int) or isinstance(sample_function.get_result(), float)
        assert sample_function.get_result() > 0

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 4 items

tests\test_tests\test_sample.py ....                                     [100%]

============================== 4 passed in 0.02s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:39:04
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest

@pytest.mark.parametrize("expected_result", [5])
def test_add(expected_result):
    assert add() == expected_result

@pytest.mark.parametrize("expected_result", [-3])
def test_subtract(expected_result):
    assert subtract() == expected_result

@pytest.mark.parametrize("expected_result", [5.0])
def test_divide(expected_result):
    assert divide() == expected_result

@pytest.mark.parametrize("input_string", ["Hello", "World"])
def test_word_add(input_string):
    result = word_add()
    assert result.startswith(input_string)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 5 items

tests\test_tests\my_testing_code.py FFFFF                                [100%]

================================== FAILURES ===================================
_________________________________ test_add[5] _________________________________

expected_result = 5

    @pytest.mark.parametrize("expected_result", [5])
    def test_add(expected_result):
>       assert add() == expected_result
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:5: NameError
______________________________ test_subtract[-3] ______________________________

expected_result = -3

    @pytest.mark.parametrize("expected_result", [-3])
    def test_subtract(expected_result):
>       assert subtract() == expected_result
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:9: NameError
______________________________ test_divide[5.0] _______________________________

expected_result = 5.0

    @pytest.mark.parametrize("expected_result", [5.0])
    def test_divide(expected_result):
>       assert divide() == expected_result
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:13: NameError
____________________________ test_word_add[Hello] _____________________________

input_string = 'Hello'

    @pytest.mark.parametrize("input_string", ["Hello", "World"])
    def test_word_add(input_string):
>       result = word_add()
                 ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:17: NameError
____________________________ test_word_add[World] _____________________________

input_string = 'World'

    @pytest.mark.parametrize("input_string", ["Hello", "World"])
    def test_word_add(input_string):
>       result = word_add()
                 ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:17: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add[5] - NameError: name 'ad...
FAILED tests/test_tests/my_testing_code.py::test_subtract[-3] - NameError: na...
FAILED tests/test_tests/my_testing_code.py::test_divide[5.0] - NameError: nam...
FAILED tests/test_tests/my_testing_code.py::test_word_add[Hello] - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_word_add[World] - NameError:...
============================== 5 failed in 0.05s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:39:25
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest

@pytest.mark.parametrize("result, expected_result", [(4, 4), (3, 3)])
def test_add(result, expected_result):
    assert add() == expected_result

def test_subtract():
    assert subtract() == 3

def test_divide():
    assert divide() == 5

def test_word_add():
    assert word_add() == "Hello World"

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 5 items

tests\test_tests\my_testing_code.py FFFFF                                [100%]

================================== FAILURES ===================================
________________________________ test_add[4-4] ________________________________

result = 4, expected_result = 4

    @pytest.mark.parametrize("result, expected_result", [(4, 4), (3, 3)])
    def test_add(result, expected_result):
>       assert add() == expected_result
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:5: NameError
________________________________ test_add[3-3] ________________________________

result = 3, expected_result = 3

    @pytest.mark.parametrize("result, expected_result", [(4, 4), (3, 3)])
    def test_add(result, expected_result):
>       assert add() == expected_result
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:5: NameError
________________________________ test_subtract ________________________________

    def test_subtract():
>       assert subtract() == 3
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:8: NameError
_________________________________ test_divide _________________________________

    def test_divide():
>       assert divide() == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:11: NameError
________________________________ test_word_add ________________________________

    def test_word_add():
>       assert word_add() == "Hello World"
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:14: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add[4-4] - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_add[3-3] - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_subtract - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_divide - NameError: name 'di...
FAILED tests/test_tests/my_testing_code.py::test_word_add - NameError: name '...
============================== 5 failed in 0.05s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:40:01
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest

@pytest.mark.parametrize("input, expected", [
    (1, 4),
    (-1, -3),
    (0, 0),
    (5, 5)
])
def test_add(input):
    assert add() == input

@pytest.mark.parametrize("input, expected", [
    (7, "Error: Invalid input")
])
def test_subtract_invalid_input(input, expected):
    with pytest.raises(ValueError) as e:
        subtract(input)

@pytest.mark.parametrize("input, expected", [
    (-3, 2),
    (0, 5)
])
def test_divide_divisible_by_zero(input, expected):
    assert divide() == input

@pytest.mark.parametrize("input", ["Hello World", "Hello"])
def test_word_add(input):
    assert word_add() == input

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
In test_add: function uses no argument 'expected'
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py - Failed: In test_add: function use...
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:40:26
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest

@pytest.mark.parametrize("input, expected", [
    (4, 7),
    (-1, -3),
    (0, 0)
])
def test_subtract(input):
    assert subtract() == input

@pytest.mark.parametrize("input, expected", [
    (10, 5.0),
    (2, 2.0)
])
def test_divide(input):
    assert divide() == input

def test_word_add():
    assert word_add() == "Hello World"

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
In test_subtract: function uses no argument 'expected'
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py - Failed: In test_subtract: functio...
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.07s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:49:46
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
import pytest

def test_addition():
    # Valid Inputs: Positive integers
    assert addition(1, 1) == 2
    
    # Valid Inputs: Negative integers
    assert addition(-1, -1) == -2
    
    # Valid Inputs: Mixed signs
    assert addition(-1, 1) == 0
    
    # Invalid Inputs: Zero
    with pytest.raises(ZeroDivisionError):
        addition(0, 1)
    
    # Boundary Cases: Maximum integer value
    assert addition(maxint, maxint) == 2  maxint
    
def test_subtraction():
    # Valid Inputs: Positive integers
    assert subtraction(5, 3) == 2
    
    # Valid Inputs: Negative integers
    assert subtraction(-3, -5) == -8
    
    # Invalid Inputs: Zero
    with pytest.raises(ZeroDivisionError):
        subtraction(0, 1)
    
    # Boundary Cases: Minimum integer value
    assert subtraction(minint, minint) == -2  minint

def test_multiplication():
    # Valid Inputs: Positive integers
    assert multiplication(5, 3) == 15
    
    # Invalid Inputs: Zero
    with pytest.raises(ZeroDivisionError):
        multiplication(0, 1)
    
    # Boundary Cases: Maximum integer value
    assert multiplication(maxint, maxint) == maxint  maxint

def test_division():
    # Valid Inputs: Positive integers
    assert division(10, 2) == 5
    
    # Invalid Inputs: Zero
    with pytest.raises(ZeroDivisionError):
        division(0, 1)
    
    # Boundary Cases: Minimum integer value
    assert division(minint, minint) == -minint

def test_addition_invalid_inputs():
    # Negative inputs
    with pytest.raises(ValueError):
        addition(-5, 3)
    
    # Non-integer inputs
    with pytest.raises(TypeError):
        addition(1.5, 2)

def test_subtraction_invalid_inputs():
    # Zero input
    with pytest.raises(ValueError):
        subtraction(0, 5)
    
    # Non-integer inputs
    with pytest.raises(TypeError):
        subtraction('a', 3)

def test_multiplication_invalid_inputs():
    # Zero input
    with pytest.raises(ValueError):
        multiplication(0, 5)
    
    # Non-integer inputs
    with pytest.raises(TypeError):
        multiplication(1.5, 2)

def test_division_invalid_inputs():
    # Zero input
    with pytest.raises(ValueError):
        division(0, 3)
    
    # Non-integer inputs
    with pytest.raises(TypeError):
        division('a', 2)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 18
E       assert addition(maxint, maxint) == 2  maxint
E                                             ^^^^^^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 17:49:59
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest

def test_add():
    # Valid inputs: positive integers
    assert add() == 5, "Test case 'add' failed"

    # Invalid inputs: negative integers
    assert add(-1) == 2, "Test case 'add' failed"

    # Boundary cases: zero input
    assert add(0) == 2, "Test case 'add' failed"

def test_subtract():
    # Valid inputs: positive integers
    assert subtract() == 3, "Test case 'subtract' failed"

    # Invalid inputs: negative integers
    with pytest.raises(ValueError):
        subtract(-1)

    # Boundary cases: zero input
    with pytest.raises(ValueError):
        subtract(0)

def test_divide():
    # Valid inputs: positive integers
    assert divide() == 5, "Test case 'divide' failed"

    # Invalid inputs: division by zero
    with pytest.raises(ZeroDivisionError):
        divide(2/1)
    # Boundary cases: one input as a float
    assert divide(10) == 5, "Test case 'divide' failed"

def test_word_add():
    # Valid inputs: string concatenation
    result = word_add()
    assert type(result) is str, "Test case 'word_add' failed"
    assert word_add() == "Hello World", "Test case 'word_add' failed"

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 4 items

tests\test_tests\my_testing_code.py FFFF                                 [100%]

================================== FAILURES ===================================
__________________________________ test_add ___________________________________

    def test_add():
        # Valid inputs: positive integers
>       assert add() == 5, "Test case 'add' failed"
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:5: NameError
________________________________ test_subtract ________________________________

    def test_subtract():
        # Valid inputs: positive integers
>       assert subtract() == 3, "Test case 'subtract' failed"
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:15: NameError
_________________________________ test_divide _________________________________

    def test_divide():
        # Valid inputs: positive integers
>       assert divide() == 5, "Test case 'divide' failed"
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:27: NameError
________________________________ test_word_add ________________________________

    def test_word_add():
        # Valid inputs: string concatenation
>       result = word_add()
                 ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:37: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add - NameError: name 'add' ...
FAILED tests/test_tests/my_testing_code.py::test_subtract - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_divide - NameError: name 'di...
FAILED tests/test_tests/my_testing_code.py::test_word_add - NameError: name '...
============================== 4 failed in 0.05s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-16 18:04:29
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
```python
import pytest

def test_add():
    # Valid Inputs
    # Test with positive numbers
    assert add() == 5, "Test with positive numbers failed"
    # Test with negative numbers
    assert add(-1, -1) == -4, "Test with negative numbers failed"
    # Test with zero
    assert add(0, 0) == 0, "Test with zero failed"

    # Invalid Inputs
    # Test with non-numeric inputs
    with pytest.raises(TypeError):
        add("a", "b")
    # Test with non-numeric inputs in different order
    with pytest.raises(TypeError):
        add(1, "b")

    # Boundary Cases
    # Test with maximum possible integer value
    assert add(2147483647, 1) == 2147483648, "Test with maximum possible integer value failed"
    # Test with minimum possible integer value
    assert add(-2147483648, -1) == -2147483647, "Test with minimum possible integer value failed"

def test_subtract():
    # Valid Inputs
    # Test with positive numbers
    assert subtract() == 3, "Test with positive numbers failed"
    # Test with negative numbers
    assert subtract(-1, -1) == -4, "Test with negative numbers failed"
    # Test with zero
    assert subtract(0, 0) == 0, "Test with zero failed"

    # Invalid Inputs
    # Test with non-numeric inputs
    with pytest.raises(TypeError):
        subtract("a", "b")
    # Test with non-numeric inputs in different order
    with pytest.raises(TypeError):
        subtract(1, "b")

    # Boundary Cases
    # Test with maximum possible integer value
    assert subtract(2147483647, 1) == 2147483646, "Test with maximum possible integer value failed"
    # Test with minimum possible integer value
    assert subtract(-2147483648, -1) == -2147483647, "Test with minimum possible integer value failed"

def test_divide():
    # Valid Inputs
    # Test with positive numbers
    assert divide() == 5.0, "Test with positive numbers failed"
    # Test with negative numbers
    assert divide(-1, -1) == 5.0, "Test with negative numbers failed"
    # Test with zero
    with pytest.raises(ZeroDivisionError):
        divide(0, 1)

    # Invalid Inputs
    # Test with non-numeric inputs
    with pytest.raises(TypeError):
        divide("a", "b")
    # Test with non-numeric inputs in different order
    with pytest.raises(TypeError):
        divide(1, "b")

    # Boundary Cases
    # Test with maximum possible integer value
    assert divide(2147483647, 1) == 2147483647.0, "Test with maximum possible integer value failed"
    # Test with minimum possible integer value
    assert divide(-2147483648, -1) == -2147483648.0, "Test with minimum possible integer value failed"

def test_word_add():
    # Valid Inputs
    # Test with two strings
    assert word_add() == "Hello World", "Test with two strings failed"
    # Test with one string
    assert word_add("Hello") == "Hello", "Test with one string failed"

    # Invalid Inputs
    # Test with non-string inputs
    with pytest.raises(TypeError):
        word_add(1, 2)
    # Test with non-string inputs in different order
    with pytest.raises(TypeError):
        word_add(1, 2)

    # Boundary Cases
    # Test with empty string
    assert word_add("") == "", "Test with empty string failed"
```

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\my_testing_code.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-16 18:04:54
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
```python
import pytest

def test_add():
    # Valid Inputs
    # Test with positive numbers
    assert add() == 5, "Test with positive numbers failed"
    # Test with negative numbers
    assert add(-1, -1) == -4, "Test with negative numbers failed"
    # Test with zero
    assert add(0, 0) == 0, "Test with zero failed"

    # Invalid Inputs
    # Test with non-numeric inputs
    with pytest.raises(TypeError):
        add("a", "b")
    # Test with non-numeric inputs in different order
    with pytest.raises(TypeError):
        add(1, "b")

    # Boundary Cases
    # Test with maximum possible integer value
    assert add(2147483647, 1) == 2147483648, "Test with maximum possible integer value failed"
    # Test with minimum possible integer value
    assert add(-2147483648, -1) == -2147483647, "Test with minimum possible integer value failed"

def test_subtract():
    # Valid Inputs
    # Test with positive numbers
    assert subtract() == 3, "Test with positive numbers failed"
    # Test with negative numbers
    assert subtract(-1, -1) == -4, "Test with negative numbers failed"
    # Test with zero
    assert subtract(0, 0) == 0, "Test with zero failed"

    # Invalid Inputs
    # Test with non-numeric inputs
    with pytest.raises(TypeError):
        subtract("a", "b")
    # Test with non-numeric inputs in different order
    with pytest.raises(TypeError):
        subtract(1, "b")

    # Boundary Cases
    # Test with maximum possible integer value
    assert subtract(2147483647, 1) == 2147483646, "Test with maximum possible integer value failed"
    # Test with minimum possible integer value
    assert subtract(-2147483648, -1) == -2147483647, "Test with minimum possible integer value failed"

def test_divide():
    # Valid Inputs
    # Test with positive numbers
    assert divide() == 5.0, "Test with positive numbers failed"
    # Test with negative numbers
    assert divide(-1, -1) == 5.0, "Test with negative numbers failed"
    # Test with zero
    with pytest.raises(ZeroDivisionError):
        divide(0, 1)

    # Invalid Inputs
    # Test with non-numeric inputs
    with pytest.raises(TypeError):
        divide("a", "b")
    # Test with non-numeric inputs in different order
    with pytest.raises(TypeError):
        divide(1, "b")

    # Boundary Cases
    # Test with maximum possible integer value
    assert divide(2147483647, 1) == 2147483647.0, "Test with maximum possible integer value failed"
    # Test with minimum possible integer value
    assert divide(-2147483648, -1) == -2147483648.0, "Test with minimum possible integer value failed"

def test_word_add():
    # Valid Inputs
    # Test with two strings
    assert word_add() == "Hello World", "Test with two strings failed"
    # Test with one string
    assert word_add("Hello") == "Hello", "Test with one string failed"

    # Invalid Inputs
    # Test with non-string inputs
    with pytest.raises(TypeError):
        word_add(1, 2)
    # Test with non-string inputs in different order
    with pytest.raises(TypeError):
        word_add(1, 2)

    # Boundary Cases
    # Test with empty string
    assert word_add("") == "", "Test with empty string failed"
```

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\my_testing_code.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.12s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 10:24:47
============================================================
Original File: tests/test_sample.py
Test File Created: test_tests/test_sample.py
Test File Path: ./tests\test_tests/test_sample.py

Code Diff:
------------------------------
diff --git a/tests/test_sample.py b/tests/test_sample.py
deleted file mode 100644
index fc0f97d..0000000
--- a/tests/test_sample.py
+++ /dev/null
@@ -1,2 +0,0 @@
-def test_addition():
-    assert 1 + 1 == 2
\ No newline at end of file

Generated Test Cases:
------------------------------
```python
import pytest

def test_addition():
    # Valid Inputs
    # Test addition of two positive integers
    assert addition(1, 1) == 2
    
    # Test addition of two negative integers
    assert addition(-1, -1) == -2
    
    # Test addition of a positive and a negative integer
    assert addition(1, -1) == 0
    
    # Test addition of a float and an integer
    assert addition(1.5, 2) == 3.5
    
    # Test addition of a string and an integer
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Invalid Inputs
    # Test addition of two non-numeric inputs
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Boundary Cases
    # Test addition of two integers at the boundary of the range
    assert addition(1, 1000) == 1001
    
    # Test addition of two floats at the boundary of the range
    assert addition(1.5, 1000.5) == 1002
    
    # Error Handling
    # Test addition of two non-numeric inputs with an error message
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input with an error message
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Return Values
    # Test addition of two positive integers with a return value
    assert addition(1, 1) == 2
    
    # Test addition of two negative integers with a return value
    assert addition(-1, -1) == -2
    
    # Test addition of a positive and a negative integer with a return value
    assert addition(1, -1) == 0
    
    # Test addition of a float and an integer with a return value
    assert addition(1.5, 2) == 3.5
    
    # Performance Testing
    # Test addition of two large integers
    assert addition(1000, 1000) == 2000
    
    # State-Based Testing
    # Test addition of two integers with a valid state
    assert addition(1, 1) == 2
    
    # Test addition of two integers with an invalid state
    with pytest.raises(ValueError):
        addition(-1, 1)
    
    # Dependency Testing
    # Test addition of two integers with a network failure
    with pytest.raises(ConnectionError):
        addition(1, 1)
    
    # Security Testing
    # Test addition of two integers with a SQL injection attack
    assert addition(1, 1) == 2
    
    # Functional Requirements
    # Positive scenarios
    # Test addition of two positive integers
    assert addition(1, 1) == 2
    
    # Test addition of two negative integers
    assert addition(-1, -1) == -2
    
    # Test addition of a positive and a negative integer
    assert addition(1, -1) == 0
    
    # Test addition of a float and an integer
    assert addition(1.5, 2) == 3.5
    
    # Test addition of a string and an integer
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Test addition of two non-numeric inputs
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Test addition of two integers at the boundary of the range
    assert addition(1, 1000) == 1001
    
    # Test addition of two floats at the boundary of the range
    assert addition(1.5, 1000.5) == 1002
    
    # Test addition of two non-numeric inputs with an error message
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input with an error message
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Test addition of two large integers
    assert addition(1000, 1000) == 2000
    
    # Test addition of two integers with a valid state
    assert addition(1, 1) == 2
    
    # Test addition of two integers with an invalid state
    with pytest.raises(ValueError):
        addition(-1, 1)
    
    # Test addition of two integers with a network failure
    with pytest.raises(ConnectionError):
        addition(1, 1)
    
    # Test addition of two integers with a SQL injection attack
    assert addition(1, 1) == 2
    
    # Negative scenarios
    # Test addition of two non-numeric inputs
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Test addition of two integers at the boundary of the range
    assert addition(1, 1000) == 1001
    
    # Test addition of two floats at the boundary of the range
    assert addition(1.5, 1000.5) == 1002
    
    # Test addition of two non-numeric inputs with an error message
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input with an error message
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Test addition of two large integers
    assert addition(1000, 1000) == 2000
    
    # Test addition of two integers with a valid state
    assert addition(1, 1) == 2
    
    # Test addition of two integers with an invalid state
    with pytest.raises(ValueError):
        addition(-1, 1)
    
    # Test addition of two integers with a network failure
    with pytest.raises(ConnectionError):
        addition(1, 1)
    
    # Test addition of two integers with a SQL injection attack
    assert addition(1, 1) == 2
    
    # Test addition of two integers with a SQL injection attack
    assert addition(1, 1) == 2
    
    # Edge cases
    # Test addition of two integers at the boundary of the range
    assert addition(1, 1000) == 1001
    
    # Test addition of two floats at the boundary of the range
    assert addition(1.5, 1000.5) == 1002
    
    # Test addition of two non-numeric inputs with an error message
    with pytest.raises(TypeError):
        addition('a', 'b')
    
    # Test addition of a non-numeric input and a numeric input with an error message
    with pytest.raises(TypeError):
        addition('a', 2)
    
    # Test addition of two large integers
    assert addition(1000, 1000) == 2000
    
    # Test addition of two integers with a valid state
    assert addition(1, 1) == 2
    
    # Test addition of two integers with an invalid state
    with pytest.raises(ValueError):
        addition(-1, 1)
    
    # Test addition of two integers with a network failure
    with pytest.raises(ConnectionError):
        addition(1, 1)
    
    # Test addition of two integers with a SQL injection attack
    assert addition(1, 1) == 2
    
    # Performance cases
    # Test addition of two large integers
    assert addition(1000, 1000) == 2000
    
    # Test addition of two integers with a valid state
    assert addition(1, 1) == 2
    
    # Test addition of two integers with an invalid state
    with pytest.raises(ValueError):
        addition(-1, 1)
    
    # Test addition of two integers with a network failure
    with pytest.raises(ConnectionError):
        addition(1, 1)
    
    # Test addition of two integers with a SQL injection attack
    assert addition(1, 1) == 2
```

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
______________ ERROR collecting tests/test_tests/test_sample.py _______________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\test_sample.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/test_sample.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.14s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 11:15:40
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
```python
import pytest

def test_add():
    # Valid inputs
    assert add() == 5, "Test add with valid inputs"
    assert add(1, 2) == 3, "Test add with two valid inputs"
    assert add(0, 0) == 0, "Test add with zero inputs"

    # Invalid inputs
    with pytest.raises(TypeError):
        add("a", "b")
    with pytest.raises(TypeError):
        add(1, "b")

    # Boundary cases
    assert add(-1, 2) == 1, "Test add with negative input"
    assert add(1, -2) == -1, "Test add with negative input"

def test_subtract():
    # Valid inputs
    assert subtract() == 3, "Test subtract with valid inputs"
    assert subtract(5, 2) == 3, "Test subtract with two valid inputs"

    # Invalid inputs
    with pytest.raises(TypeError):
        subtract("a", "b")
    with pytest.raises(TypeError):
        subtract(1, "b")

    # Boundary cases
    assert subtract(-1, 2) == -3, "Test subtract with negative input"
    assert subtract(1, -2) == -3, "Test subtract with negative input"

def test_divide():
    # Valid inputs
    assert divide() == 5, "Test divide with valid inputs"
    assert divide(10, 2) == 5, "Test divide with two valid inputs"

    # Invalid inputs
    with pytest.raises(ZeroDivisionError):
        divide(0, 2)
    with pytest.raises(TypeError):
        divide("a", 2)

    # Boundary cases
    assert divide(-1, 2) == -0.5, "Test divide with negative input"
    assert divide(1, -2) == -0.5, "Test divide with negative input"

def test_word_add():
    # Valid inputs
    assert word_add() == "Hello World", "Test word_add with valid inputs"
    assert word_add("Hello", " World") == "Hello World", "Test word_add with two valid inputs"

    # Invalid inputs
    with pytest.raises(TypeError):
        word_add("a", "b")
    with pytest.raises(TypeError):
        word_add(1, "b")

    # Boundary cases
    assert word_add("Hello", " ") == "Hello", "Test word_add with empty string"
    assert word_add(" ", "World") == "World", "Test word_add with empty string"

def test_add_invalid_input():
    # Invalid inputs
    with pytest.raises(TypeError):
        add("a", "b")
    with pytest.raises(TypeError):
        add(1, "b")

def test_subtract_invalid_input():
    # Invalid inputs
    with pytest.raises(TypeError):
        subtract("a", "b")
    with pytest.raises(TypeError):
        subtract(1, "b")

def test_divide_invalid_input():
    # Invalid inputs
    with pytest.raises(ZeroDivisionError):
        divide(0, 2)
    with pytest.raises(TypeError):
        divide("a", 2)

def test_word_add_invalid_input():
    # Invalid inputs
    with pytest.raises(TypeError):
        word_add("a", "b")
    with pytest.raises(TypeError):
        word_add(1, "b")

def test_add_performance():
    # Performance testing
    import time
    start_time = time.time()
    for _ in range(100000):
        add()
    end_time = time.time()
    assert end_time - start_time < 1, "Test add performance"

def test_subtract_performance():
    # Performance testing
    import time
    start_time = time.time()
    for _ in range(100000):
        subtract()
    end_time = time.time()
    assert end_time - start_time < 1, "Test subtract performance"

def test_divide_performance():
    # Performance testing
    import time
    start_time = time.time()
    for _ in range(100000):
        divide()
    end_time = time.time()
    assert end_time - start_time < 1, "Test divide performance"

def test_word_add_performance():
    # Performance testing
    import time
    start_time = time.time()
    for _ in range(100000):
        word_add()
    end_time = time.time()
    assert end_time - start_time < 1, "Test word_add performance"

def test_word_add_state_based():
    # State-based testing
    word = word_add()
    assert word == "Hello World", "Test word_add state"
    word = word_add()
    assert word == "Hello World", "Test word_add state"

def test_word_add_dependency_based():
    # Dependency testing
    import requests
    with pytest.raises(requests.RequestException):
        word_add()
```

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\my_testing_code.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.27s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 12:34:11
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest
import unittest

def test_add():
    assert add() == 5

def test_subtract():
    assert subtract() == 3

def test_divide():
    assert divide() == 5

def test_word_add():
    assert word_add() == 'Hello World'

def test_add_invalid_input():
    with pytest.raises(TypeError):
        add(None)

def test_subtract_invalid_input():
    with pytest.raises(TypeError):
        subtract(None)

def test_divide_invalid_input():
    with pytest.raises(ZeroDivisionError):
        divide(0)

def test_word_add_invalid_input():
    with pytest.raises(TypeError):
        word_add(None)

def test_add_empty_input():
    with pytest.raises(TypeError):
        add('')

def test_subtract_empty_input():
    with pytest.raises(TypeError):
        subtract('')

def test_divide_empty_input():
    with pytest.raises(TypeError):
        divide('')

def test_word_add_empty_input():
    with pytest.raises(TypeError):
        word_add('')

def test_add_non_numeric_input():
    with pytest.raises(TypeError):
        add('a')

def test_subtract_non_numeric_input():
    with pytest.raises(TypeError):
        subtract('a')

def test_divide_non_numeric_input():
    with pytest.raises(TypeError):
        divide('a')

def test_word_add_non_string_input():
    with pytest.raises(TypeError):
        word_add(123)

def test_add_negative_input():
    with pytest.raises(TypeError):
        add(-1)

def test_subtract_negative_input():
    with pytest.raises(TypeError):
        subtract(-1)

def test_divide_negative_input():
    with pytest.raises(ZeroDivisionError):
        divide(-1)

def test_word_add_negative_input():
    with pytest.raises(TypeError):
        word_add(-1)

def test_add_zero_input():
    assert add(0) == 2

def test_subtract_zero_input():
    assert subtract(0) == 5

def test_divide_zero_input():
    with pytest.raises(ZeroDivisionError):
        divide(0)

def test_word_add_zero_input():
    assert word_add(0) == 'Hello'

def test_add_large_input():
    assert add(100) == 103

def test_subtract_large_input():
    assert subtract(100) == 93

def test_divide_large_input():
    assert divide(100) == 5

def test_word_add_large_input():
    assert word_add('Hello') == 'Hello World'

def test_add_string_input():
    assert add('a') == 2

def test_subtract_string_input():
    assert subtract('a') == 3

def test_divide_string_input():
    assert divide('a') == 5

def test_word_add_string_input():
    assert word_add('Hello') == 'Hello World'

def test_add_float_input():
    assert add(3.5) == 6.5

def test_subtract_float_input():
    assert subtract(3.5) == 2.5

def test_divide_float_input():
    assert divide(3.5) == 1.5

def test_word_add_float_input():
    assert word_add('3.5') == 'Hello 3.5 World'

def test_add_complex_input():
    with pytest.raises(TypeError):
        add(3+4j)

def test_subtract_complex_input():
    with pytest.raises(TypeError):
        subtract(3+4j)

def test_divide_complex_input():
    with pytest.raises(ZeroDivisionError):
        divide(3+4j)

def test_word_add_complex_input():
    with pytest.raises(TypeError):
        word_add(3+4j)

def test_add_list_input():
    with pytest.raises(TypeError):
        add([1, 2, 3])

def test_subtract_list_input():
    with pytest.raises(TypeError):
        subtract([1, 2, 3])

def test_divide_list_input():
    with pytest.raises(TypeError):
        divide([1, 2, 3])

def test_word_add_list_input():
    with pytest.raises(TypeError):
        word_add([1, 2, 3])

def test_add_dict_input():
    with pytest.raises(TypeError):
        add({'a': 1})

def test_subtract_dict_input():
    with pytest.raises(TypeError):
        subtract({'a': 1})

def test_divide_dict_input():
    with pytest.raises(ZeroDivisionError):
        divide({'a': 1})

def test_word_add_dict_input():
    with pytest.raises(TypeError):
        word_add({'a': 1})

def test_add_set_input():
    with pytest.raises(TypeError):
        add({1, 2, 3})

def test_subtract_set_input():
    with pytest.raises(TypeError):
        subtract({1, 2, 3})

def test_divide_set_input():
    with pytest.raises(ZeroDivisionError):
        divide({1, 2, 3})

def test_word_add_set_input():
    with pytest.raises(TypeError):
        word_add({1, 2, 3})

def test_add_tuple_input():
    with pytest.raises(TypeError):
        add((1, 2, 3))

def test_subtract_tuple_input():
    with pytest.raises(TypeError):
        subtract((1, 2, 3))

def test_divide_tuple_input():
    with pytest.raises(ZeroDivisionError):
        divide((1, 2, 3))

def test_word_add_tuple_input():
    with pytest.raises(TypeError):
        word_add((1, 2, 3))

def test_add_bytes_input():
    with pytest.raises(TypeError):
        add(b'hello')

def test_subtract_bytes_input():
    with pytest.raises(TypeError):
        subtract(b'hello')

def test_divide_bytes_input():
    with pytest.raises(ZeroDivisionError):
        divide(b'hello')

def test_word_add_bytes_input():
    with pytest.raises(TypeError):
        word_add(b'hello')

def test_add_memoryview_input():
    with pytest.raises(TypeError):
        add(memoryview(b'hello'))

def test_subtract_memoryview_input():
    with pytest.raises(TypeError):
        subtract(memoryview(b'hello'))

def test_divide_memoryview_input():
    with pytest.raises(ZeroDivisionError):
        divide(memoryview(b'hello'))

def test_word_add_memoryview_input():
    with pytest.raises(TypeError):
        word_add(memoryview(b'hello'))

class TestMyTestingCode(unittest.TestCase):

    def test_add(self):
        self.assertEqual(add(), 5)

    def test_subtract(self):
        self.assertEqual(subtract(), 3)

    def test_divide(self):
        self.assertEqual(divide(), 5)

    def test_word_add(self):
        self.assertEqual(word_add(), 'Hello World')

    def test_add_invalid_input(self):
        with self.assertRaises(TypeError):
            add(None)

    def test_subtract_invalid_input(self):
        with self.assertRaises(TypeError):
            subtract(None)

    def test_divide_invalid_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0)

    def test_word_add_invalid_input(self):
        with self.assertRaises(TypeError):
            word_add(None)

    def test_add_empty_input(self):
        with self.assertRaises(TypeError):
            add('')

    def test_subtract_empty_input(self):
        with self.assertRaises(TypeError):
            subtract('')

    def test_divide_empty_input(self):
        with self.assertRaises(TypeError):
            divide('')

    def test_word_add_empty_input(self):
        with self.assertRaises(TypeError):
            word_add('')

    def test_add_non_numeric_input(self):
        with self.assertRaises(TypeError):
            add('a')

    def test_subtract_non_numeric_input(self):
        with self.assertRaises(TypeError):
            subtract('a')

    def test_divide_non_numeric_input(self):
        with self.assertRaises(TypeError):
            divide('a')

    def test_word_add_non_string_input(self):
        with self.assertRaises(TypeError):
            word_add(123)

    def test_add_negative_input(self):
        with self.assertRaises(TypeError):
            add(-1)

    def test_subtract_negative_input(self):
        with self.assertRaises(TypeError):
            subtract(-1)

    def test_divide_negative_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-1)

    def test_word_add_negative_input(self):
        with self.assertRaises(TypeError):
            word_add(-1)

    def test_add_zero_input(self):
        self.assertEqual(add(0), 2)

    def test_subtract_zero_input(self):
        self.assertEqual(subtract(0), 5)

    def test_divide_zero_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0)

    def test_word_add_zero_input(self):
        self.assertEqual(word_add(0), 'Hello')

    def test_add_large_input(self):
        self.assertEqual(add(100), 103)

    def test_subtract_large_input(self):
        self.assertEqual(subtract(100), 93)

    def test_divide_large_input(self):
        self.assertEqual(divide(100), 5)

    def test_word_add_large_input(self):
        self.assertEqual(word_add('Hello'), 'Hello World')

    def test_add_string_input(self):
        self.assertEqual(add('a'), 2)

    def test_subtract_string_input(self):
        self.assertEqual(subtract('a'), 3)

    def test_divide_string_input(self):
        self.assertEqual(divide('a'), 5)

    def test_word_add_string_input(self):
        self.assertEqual(word_add('Hello'), 'Hello World')

    def test_add_float_input(self):
        self.assertEqual(add(3.5), 6.5)

    def test_subtract_float_input(self):
        self.assertEqual(subtract(3.5), 2.5)

    def test_divide_float_input(self):
        self.assertEqual(divide(3.5), 1.5)

    def test_word_add_float_input(self):
        self.assertEqual(word_add('3.5'), 'Hello 3.5 World')

    def test_add_complex_input(self):
        with self.assertRaises(TypeError):
            add(3+4j)

    def test_subtract_complex_input(self):
        with self.assertRaises(TypeError):
            subtract(3+4j)

    def test_divide_complex_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(3+4j)

    def test_word_add_complex_input(self):
        with self.assertRaises(TypeError):
            word_add(3+4j)

    def test_add_list_input(self):
        with self.assertRaises(TypeError):
            add([1, 2, 3])

    def test_subtract_list_input(self):
        with self.assertRaises(TypeError):
            subtract([1, 2, 3])

    def test_divide_list_input(self):
        with self.assertRaises(TypeError):
            divide([1, 2, 3])

    def test_word_add_list_input(self):
        with self.assertRaises(TypeError):
            word_add([1, 2, 3])

    def test_add_dict_input(self):
        with self.assertRaises(TypeError):
            add({'a': 1})

    def test_subtract_dict_input(self):
        with self.assertRaises(TypeError):
            subtract({'a': 1})

    def test_divide_dict_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide({'a': 1})

    def test_word_add_dict_input(self):
        with self.assertRaises(TypeError):
            word_add({'a': 1})

    def test_add_set_input(self):
        with self.assertRaises(TypeError):
            add({1, 2, 3})

    def test_subtract_set_input(self):
        with self.assertRaises(TypeError):
            subtract({1, 2, 3})

    def test_divide_set_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide({1, 2, 3})

    def test_word_add_set_input(self):
        with self.assertRaises(TypeError):
            word_add({1, 2, 3})

    def test_add_tuple_input(self):
        with self.assertRaises(TypeError):
            add((1, 2, 3))

    def test_subtract_tuple_input(self):
        with self.assertRaises(TypeError):
            subtract((1, 2, 3))

    def test_divide_tuple_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide((1, 2, 3))

    def test_word_add_tuple_input(self):
        with self.assertRaises(TypeError):
            word_add((1, 2, 3))

    def test_add_bytes_input(self):
        with self.assertRaises(TypeError):
            add(b'hello')

    def test_subtract_bytes_input(self):
        with self.assertRaises(TypeError):
            subtract(b'hello')

    def test_divide_bytes_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(b'hello')

    def test_word_add_bytes_input(self):
        with self.assertRaises(TypeError):
            word_add(b'hello')

    def test_add_memoryview_input(self):
        with self.assertRaises(TypeError):
            add(memoryview(b'hello'))

    def test_subtract_memoryview_input(self):
        with self.assertRaises(TypeError):
            subtract(memoryview(b'hello'))

    def test_divide_memoryview_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(memoryview(b'hello'))

    def test_word_add_memoryview_input(self):
        with self.assertRaises(TypeError):
            word_add(memoryview(b'hello'))

class TestMyTestingCode(unittest.TestCase):

    def test_add(self):
        self.assertEqual(add(), 5)

    def test_subtract(self):
        self.assertEqual(subtract(), 3)

    def test_divide(self):
        self.assertEqual(divide(), 5)

    def test_word_add(self):
        self.assertEqual(word_add(), 'Hello World')

    def test_add_invalid_input(self):
        with self.assertRaises(TypeError):
            add(None)

    def test_subtract_invalid_input(self):
        with self.assertRaises(TypeError):
            subtract(None)

    def test_divide_invalid_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0)

    def test_word_add_invalid_input(self):
        with self.assertRaises(TypeError):
            word_add(None)

    def test_add_empty_input(self):
        with self.assertRaises(TypeError):
            add('')

    def test_subtract_empty_input(self):
        with self.assertRaises(TypeError):
            subtract('')

    def test_divide_empty_input(self):
        with self.assertRaises(TypeError):
            divide('')

    def test_word_add_empty_input(self):
        with self.assertRaises(TypeError):
            word_add('')

    def test_add_non_numeric_input(self):
        with self.assertRaises(TypeError):
            add('a')

    def test_subtract_non_numeric_input(self):
        with self.assertRaises(TypeError):
            subtract('a')

    def test_divide_non_numeric_input(self):
        with self.assertRaises(TypeError):
            divide('a')

    def test_word_add_non_string_input(self):
        with self.assertRaises(TypeError):
            word_add(123)

    def test_add_negative_input(self):
        with self.assertRaises(TypeError):
            add(-1)

    def test_subtract_negative_input(self):
        with self.assertRaises(TypeError):
            subtract(-1)

    def test_divide_negative_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-1)

    def test_word_add_negative_input(self):
        with self.assertRaises(TypeError):
            word_add(-1)

    def test_add_zero_input(self):
        self.assertEqual(add(0), 2)

    def test_subtract_zero_input(self):
        self.assertEqual(subtract(0), 5)

    def test_divide_zero_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0)

    def test_word_add_zero_input(self):
        self.assertEqual(word_add(0), 'Hello')

    def test_add_large_input(self):
        self.assertEqual(add(100), 103)

    def test_subtract_large_input(self):
        self.assertEqual(subtract(100), 93)

    def test_divide_large_input(self):
        self.assertEqual(divide(100), 5)

    def test_word_add_large_input(self):
        self.assertEqual(word_add('Hello'), 'Hello World')

    def test_add_string_input(self):
        self.assertEqual(add('a'), 2)

    def test_subtract_string_input(self):
        self.assertEqual(subtract('a'), 3)

    def test_divide_string_input(self):
        self.assertEqual(divide('a'), 5)

    def test_word_add_string_input(self):
        self.assertEqual(word_add('Hello'), 'Hello World')

    def test_add_float_input(self):
        self.assertEqual(add(3.5), 6.5)

    def test_subtract_float_input(self):
        self.assertEqual(subtract(3.5), 2.5)

    def test_divide_float_input(self):
        self.assertEqual(divide(3.5), 1.5)

    def test_word_add_float_input(self):
        self.assertEqual(word_add('3.5'), 'Hello 3.5 World')

    def test_add_complex_input(self):
        with self.assertRaises(TypeError):
            add(3+4j)

    def test_subtract_complex_input(self):
        with self.assertRaises(TypeError):
            subtract(3+4j)

    def test_divide_complex_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(3+4j)

    def test_word_add_complex_input(self):
        with self.assertRaises(TypeError):
            word_add(3+4j)

    def test_add_list_input(self):
        with self.assertRaises(TypeError):
            add([1, 2, 3])

    def test_subtract_list_input(self):
        with self.assertRaises(TypeError):
            subtract([1, 2, 3])

    def test_divide_list_input(self):
        with self.assertRaises(TypeError):
            divide([1, 2, 3])

    def test_word_add_list_input(self):
        with self.assertRaises(TypeError):
            word_add([1, 2, 3])

    def test_add_dict_input(self):
        with self.assertRaises(TypeError):
            add({'a': 1})

    def test_subtract_dict_input(self):
        with self.assertRaises(TypeError):
            subtract({'a': 1})

    def test_divide_dict_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide({'a': 1})

    def test_word_add_dict_input(self):
        with self.assertRaises(TypeError):
            word_add({'a': 1})

    def test_add_set_input(self):
        with self.assertRaises(TypeError):
            add({1, 2, 3})

    def test_subtract_set_input(self):
        with self.assertRaises(TypeError):
            subtract({1, 2, 3})

    def test_divide_set_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide({1, 2, 3})

    def test_word_add_set_input(self):
        with self.assertRaises(TypeError):
            word_add({1, 2, 3})

    def test_add_tuple_input(self):
        with self.assertRaises(TypeError):
            add((1, 2, 3))

    def test_subtract_tuple_input(self):
        with self.assertRaises(TypeError):
            subtract((1, 2, 3))

    def test_divide_tuple_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide((1, 2, 3))

    def test_word_add_tuple_input(self):
        with self.assertRaises(TypeError):
            word_add((1, 2, 3))

    def test_add_bytes_input(self):
        with self.assertRaises(TypeError):
            add(b'hello')

    def test_subtract_bytes_input(self):
        with self.assertRaises(TypeError):
            subtract(b'hello')

    def test_divide_bytes_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(b'hello')

    def test_word_add_bytes_input(self):
        with self.assertRaises(TypeError):
            word_add(b'hello')

    def test_add_memoryview_input(self):
        with self.assertRaises(TypeError):
            add(memoryview(b'hello'))

    def test_subtract_memoryview_input(self):
        with self.assertRaises(TypeError):
            subtract(memoryview(b'hello'))

    def test_divide_memoryview_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(memoryview(b'hello'))

    def test_word_add_memoryview_input(self):
        with self.assertRaises(TypeError):
            word_add(memoryview(b'hello'))

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 128 items

tests\test_tests\my_testing_code.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 28%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 84%]
FFFFFFFFFFFFFFFFFFFF                                                     [100%]

================================== FAILURES ===================================
__________________________________ test_add ___________________________________

    def test_add():
>       assert add() == 5
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:5: NameError
________________________________ test_subtract ________________________________

    def test_subtract():
>       assert subtract() == 3
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:8: NameError
_________________________________ test_divide _________________________________

    def test_divide():
>       assert divide() == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:11: NameError
________________________________ test_word_add ________________________________

    def test_word_add():
>       assert word_add() == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:14: NameError
___________________________ test_add_invalid_input ____________________________

    def test_add_invalid_input():
        with pytest.raises(TypeError):
>           add(None)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:18: NameError
_________________________ test_subtract_invalid_input _________________________

    def test_subtract_invalid_input():
        with pytest.raises(TypeError):
>           subtract(None)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:22: NameError
__________________________ test_divide_invalid_input __________________________

    def test_divide_invalid_input():
        with pytest.raises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:26: NameError
_________________________ test_word_add_invalid_input _________________________

    def test_word_add_invalid_input():
        with pytest.raises(TypeError):
>           word_add(None)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:30: NameError
____________________________ test_add_empty_input _____________________________

    def test_add_empty_input():
        with pytest.raises(TypeError):
>           add('')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:34: NameError
__________________________ test_subtract_empty_input __________________________

    def test_subtract_empty_input():
        with pytest.raises(TypeError):
>           subtract('')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:38: NameError
___________________________ test_divide_empty_input ___________________________

    def test_divide_empty_input():
        with pytest.raises(TypeError):
>           divide('')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:42: NameError
__________________________ test_word_add_empty_input __________________________

    def test_word_add_empty_input():
        with pytest.raises(TypeError):
>           word_add('')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:46: NameError
_________________________ test_add_non_numeric_input __________________________

    def test_add_non_numeric_input():
        with pytest.raises(TypeError):
>           add('a')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:50: NameError
_______________________ test_subtract_non_numeric_input _______________________

    def test_subtract_non_numeric_input():
        with pytest.raises(TypeError):
>           subtract('a')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:54: NameError
________________________ test_divide_non_numeric_input ________________________

    def test_divide_non_numeric_input():
        with pytest.raises(TypeError):
>           divide('a')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:58: NameError
_______________________ test_word_add_non_string_input ________________________

    def test_word_add_non_string_input():
        with pytest.raises(TypeError):
>           word_add(123)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:62: NameError
___________________________ test_add_negative_input ___________________________

    def test_add_negative_input():
        with pytest.raises(TypeError):
>           add(-1)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:66: NameError
________________________ test_subtract_negative_input _________________________

    def test_subtract_negative_input():
        with pytest.raises(TypeError):
>           subtract(-1)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:70: NameError
_________________________ test_divide_negative_input __________________________

    def test_divide_negative_input():
        with pytest.raises(ZeroDivisionError):
>           divide(-1)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:74: NameError
________________________ test_word_add_negative_input _________________________

    def test_word_add_negative_input():
        with pytest.raises(TypeError):
>           word_add(-1)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:78: NameError
_____________________________ test_add_zero_input _____________________________

    def test_add_zero_input():
>       assert add(0) == 2
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:81: NameError
__________________________ test_subtract_zero_input ___________________________

    def test_subtract_zero_input():
>       assert subtract(0) == 5
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:84: NameError
___________________________ test_divide_zero_input ____________________________

    def test_divide_zero_input():
        with pytest.raises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:88: NameError
__________________________ test_word_add_zero_input ___________________________

    def test_word_add_zero_input():
>       assert word_add(0) == 'Hello'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:91: NameError
____________________________ test_add_large_input _____________________________

    def test_add_large_input():
>       assert add(100) == 103
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:94: NameError
__________________________ test_subtract_large_input __________________________

    def test_subtract_large_input():
>       assert subtract(100) == 93
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:97: NameError
___________________________ test_divide_large_input ___________________________

    def test_divide_large_input():
>       assert divide(100) == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:100: NameError
__________________________ test_word_add_large_input __________________________

    def test_word_add_large_input():
>       assert word_add('Hello') == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:103: NameError
____________________________ test_add_string_input ____________________________

    def test_add_string_input():
>       assert add('a') == 2
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:106: NameError
_________________________ test_subtract_string_input __________________________

    def test_subtract_string_input():
>       assert subtract('a') == 3
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:109: NameError
__________________________ test_divide_string_input ___________________________

    def test_divide_string_input():
>       assert divide('a') == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:112: NameError
_________________________ test_word_add_string_input __________________________

    def test_word_add_string_input():
>       assert word_add('Hello') == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:115: NameError
____________________________ test_add_float_input _____________________________

    def test_add_float_input():
>       assert add(3.5) == 6.5
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:118: NameError
__________________________ test_subtract_float_input __________________________

    def test_subtract_float_input():
>       assert subtract(3.5) == 2.5
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:121: NameError
___________________________ test_divide_float_input ___________________________

    def test_divide_float_input():
>       assert divide(3.5) == 1.5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:124: NameError
__________________________ test_word_add_float_input __________________________

    def test_word_add_float_input():
>       assert word_add('3.5') == 'Hello 3.5 World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:127: NameError
___________________________ test_add_complex_input ____________________________

    def test_add_complex_input():
        with pytest.raises(TypeError):
>           add(3+4j)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:131: NameError
_________________________ test_subtract_complex_input _________________________

    def test_subtract_complex_input():
        with pytest.raises(TypeError):
>           subtract(3+4j)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:135: NameError
__________________________ test_divide_complex_input __________________________

    def test_divide_complex_input():
        with pytest.raises(ZeroDivisionError):
>           divide(3+4j)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:139: NameError
_________________________ test_word_add_complex_input _________________________

    def test_word_add_complex_input():
        with pytest.raises(TypeError):
>           word_add(3+4j)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:143: NameError
_____________________________ test_add_list_input _____________________________

    def test_add_list_input():
        with pytest.raises(TypeError):
>           add([1, 2, 3])
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:147: NameError
__________________________ test_subtract_list_input ___________________________

    def test_subtract_list_input():
        with pytest.raises(TypeError):
>           subtract([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:151: NameError
___________________________ test_divide_list_input ____________________________

    def test_divide_list_input():
        with pytest.raises(TypeError):
>           divide([1, 2, 3])
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:155: NameError
__________________________ test_word_add_list_input ___________________________

    def test_word_add_list_input():
        with pytest.raises(TypeError):
>           word_add([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:159: NameError
_____________________________ test_add_dict_input _____________________________

    def test_add_dict_input():
        with pytest.raises(TypeError):
>           add({'a': 1})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:163: NameError
__________________________ test_subtract_dict_input ___________________________

    def test_subtract_dict_input():
        with pytest.raises(TypeError):
>           subtract({'a': 1})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:167: NameError
___________________________ test_divide_dict_input ____________________________

    def test_divide_dict_input():
        with pytest.raises(ZeroDivisionError):
>           divide({'a': 1})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:171: NameError
__________________________ test_word_add_dict_input ___________________________

    def test_word_add_dict_input():
        with pytest.raises(TypeError):
>           word_add({'a': 1})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:175: NameError
_____________________________ test_add_set_input ______________________________

    def test_add_set_input():
        with pytest.raises(TypeError):
>           add({1, 2, 3})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:179: NameError
___________________________ test_subtract_set_input ___________________________

    def test_subtract_set_input():
        with pytest.raises(TypeError):
>           subtract({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:183: NameError
____________________________ test_divide_set_input ____________________________

    def test_divide_set_input():
        with pytest.raises(ZeroDivisionError):
>           divide({1, 2, 3})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:187: NameError
___________________________ test_word_add_set_input ___________________________

    def test_word_add_set_input():
        with pytest.raises(TypeError):
>           word_add({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:191: NameError
____________________________ test_add_tuple_input _____________________________

    def test_add_tuple_input():
        with pytest.raises(TypeError):
>           add((1, 2, 3))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:195: NameError
__________________________ test_subtract_tuple_input __________________________

    def test_subtract_tuple_input():
        with pytest.raises(TypeError):
>           subtract((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:199: NameError
___________________________ test_divide_tuple_input ___________________________

    def test_divide_tuple_input():
        with pytest.raises(ZeroDivisionError):
>           divide((1, 2, 3))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:203: NameError
__________________________ test_word_add_tuple_input __________________________

    def test_word_add_tuple_input():
        with pytest.raises(TypeError):
>           word_add((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:207: NameError
____________________________ test_add_bytes_input _____________________________

    def test_add_bytes_input():
        with pytest.raises(TypeError):
>           add(b'hello')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:211: NameError
__________________________ test_subtract_bytes_input __________________________

    def test_subtract_bytes_input():
        with pytest.raises(TypeError):
>           subtract(b'hello')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:215: NameError
___________________________ test_divide_bytes_input ___________________________

    def test_divide_bytes_input():
        with pytest.raises(ZeroDivisionError):
>           divide(b'hello')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:219: NameError
__________________________ test_word_add_bytes_input __________________________

    def test_word_add_bytes_input():
        with pytest.raises(TypeError):
>           word_add(b'hello')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:223: NameError
__________________________ test_add_memoryview_input __________________________

    def test_add_memoryview_input():
        with pytest.raises(TypeError):
>           add(memoryview(b'hello'))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:227: NameError
_______________________ test_subtract_memoryview_input ________________________

    def test_subtract_memoryview_input():
        with pytest.raises(TypeError):
>           subtract(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:231: NameError
________________________ test_divide_memoryview_input _________________________

    def test_divide_memoryview_input():
        with pytest.raises(ZeroDivisionError):
>           divide(memoryview(b'hello'))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:235: NameError
_______________________ test_word_add_memoryview_input ________________________

    def test_word_add_memoryview_input():
        with pytest.raises(TypeError):
>           word_add(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:239: NameError
_________________________ TestMyTestingCode.test_add __________________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add>

    def test_add(self):
>       self.assertEqual(add(), 5)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:483: NameError
___________________ TestMyTestingCode.test_add_bytes_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_bytes_input>

    def test_add_bytes_input(self):
        with self.assertRaises(TypeError):
>           add(b'hello')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:689: NameError
__________________ TestMyTestingCode.test_add_complex_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_complex_input>

    def test_add_complex_input(self):
        with self.assertRaises(TypeError):
>           add(3+4j)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:609: NameError
____________________ TestMyTestingCode.test_add_dict_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_dict_input>

    def test_add_dict_input(self):
        with self.assertRaises(TypeError):
>           add({'a': 1})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:641: NameError
___________________ TestMyTestingCode.test_add_empty_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_empty_input>

    def test_add_empty_input(self):
        with self.assertRaises(TypeError):
>           add('')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:512: NameError
___________________ TestMyTestingCode.test_add_float_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_float_input>

    def test_add_float_input(self):
>       self.assertEqual(add(3.5), 6.5)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:596: NameError
__________________ TestMyTestingCode.test_add_invalid_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_invalid_input>

    def test_add_invalid_input(self):
        with self.assertRaises(TypeError):
>           add(None)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:496: NameError
___________________ TestMyTestingCode.test_add_large_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_large_input>

    def test_add_large_input(self):
>       self.assertEqual(add(100), 103)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:572: NameError
____________________ TestMyTestingCode.test_add_list_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_list_input>

    def test_add_list_input(self):
        with self.assertRaises(TypeError):
>           add([1, 2, 3])
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:625: NameError
_________________ TestMyTestingCode.test_add_memoryview_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_memoryview_input>

    def test_add_memoryview_input(self):
        with self.assertRaises(TypeError):
>           add(memoryview(b'hello'))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:705: NameError
__________________ TestMyTestingCode.test_add_negative_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_negative_input>

    def test_add_negative_input(self):
        with self.assertRaises(TypeError):
>           add(-1)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:544: NameError
________________ TestMyTestingCode.test_add_non_numeric_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_non_numeric_input>

    def test_add_non_numeric_input(self):
        with self.assertRaises(TypeError):
>           add('a')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:528: NameError
____________________ TestMyTestingCode.test_add_set_input _____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_set_input>

    def test_add_set_input(self):
        with self.assertRaises(TypeError):
>           add({1, 2, 3})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:657: NameError
___________________ TestMyTestingCode.test_add_string_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_string_input>

    def test_add_string_input(self):
>       self.assertEqual(add('a'), 2)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:584: NameError
___________________ TestMyTestingCode.test_add_tuple_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_tuple_input>

    def test_add_tuple_input(self):
        with self.assertRaises(TypeError):
>           add((1, 2, 3))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:673: NameError
____________________ TestMyTestingCode.test_add_zero_input ____________________

self = <my_testing_code.TestMyTestingCode testMethod=test_add_zero_input>

    def test_add_zero_input(self):
>       self.assertEqual(add(0), 2)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:559: NameError
________________________ TestMyTestingCode.test_divide ________________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide>

    def test_divide(self):
>       self.assertEqual(divide(), 5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:489: NameError
__________________ TestMyTestingCode.test_divide_bytes_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_bytes_input>

    def test_divide_bytes_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(b'hello')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:697: NameError
_________________ TestMyTestingCode.test_divide_complex_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_complex_input>

    def test_divide_complex_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(3+4j)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:617: NameError
__________________ TestMyTestingCode.test_divide_dict_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_dict_input>

    def test_divide_dict_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide({'a': 1})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:649: NameError
__________________ TestMyTestingCode.test_divide_empty_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_empty_input>

    def test_divide_empty_input(self):
        with self.assertRaises(TypeError):
>           divide('')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:520: NameError
__________________ TestMyTestingCode.test_divide_float_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_float_input>

    def test_divide_float_input(self):
>       self.assertEqual(divide(3.5), 1.5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:602: NameError
_________________ TestMyTestingCode.test_divide_invalid_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_invalid_input>

    def test_divide_invalid_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:504: NameError
__________________ TestMyTestingCode.test_divide_large_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_large_input>

    def test_divide_large_input(self):
>       self.assertEqual(divide(100), 5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:578: NameError
__________________ TestMyTestingCode.test_divide_list_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_list_input>

    def test_divide_list_input(self):
        with self.assertRaises(TypeError):
>           divide([1, 2, 3])
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:633: NameError
_______________ TestMyTestingCode.test_divide_memoryview_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_memoryview_input>

    def test_divide_memoryview_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(memoryview(b'hello'))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:713: NameError
________________ TestMyTestingCode.test_divide_negative_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_negative_input>

    def test_divide_negative_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(-1)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:552: NameError
_______________ TestMyTestingCode.test_divide_non_numeric_input _______________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_non_numeric_input>

    def test_divide_non_numeric_input(self):
        with self.assertRaises(TypeError):
>           divide('a')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:536: NameError
___________________ TestMyTestingCode.test_divide_set_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_set_input>

    def test_divide_set_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide({1, 2, 3})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:665: NameError
_________________ TestMyTestingCode.test_divide_string_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_string_input>

    def test_divide_string_input(self):
>       self.assertEqual(divide('a'), 5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:590: NameError
__________________ TestMyTestingCode.test_divide_tuple_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_tuple_input>

    def test_divide_tuple_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide((1, 2, 3))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:681: NameError
__________________ TestMyTestingCode.test_divide_zero_input ___________________

self = <my_testing_code.TestMyTestingCode testMethod=test_divide_zero_input>

    def test_divide_zero_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:566: NameError
_______________________ TestMyTestingCode.test_subtract _______________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract>

    def test_subtract(self):
>       self.assertEqual(subtract(), 3)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:486: NameError
_________________ TestMyTestingCode.test_subtract_bytes_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_bytes_input>

    def test_subtract_bytes_input(self):
        with self.assertRaises(TypeError):
>           subtract(b'hello')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:693: NameError
________________ TestMyTestingCode.test_subtract_complex_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_complex_input>

    def test_subtract_complex_input(self):
        with self.assertRaises(TypeError):
>           subtract(3+4j)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:613: NameError
_________________ TestMyTestingCode.test_subtract_dict_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_dict_input>

    def test_subtract_dict_input(self):
        with self.assertRaises(TypeError):
>           subtract({'a': 1})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:645: NameError
_________________ TestMyTestingCode.test_subtract_empty_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_empty_input>

    def test_subtract_empty_input(self):
        with self.assertRaises(TypeError):
>           subtract('')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:516: NameError
_________________ TestMyTestingCode.test_subtract_float_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_float_input>

    def test_subtract_float_input(self):
>       self.assertEqual(subtract(3.5), 2.5)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:599: NameError
________________ TestMyTestingCode.test_subtract_invalid_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_invalid_input>

    def test_subtract_invalid_input(self):
        with self.assertRaises(TypeError):
>           subtract(None)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:500: NameError
_________________ TestMyTestingCode.test_subtract_large_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_large_input>

    def test_subtract_large_input(self):
>       self.assertEqual(subtract(100), 93)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:575: NameError
_________________ TestMyTestingCode.test_subtract_list_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_list_input>

    def test_subtract_list_input(self):
        with self.assertRaises(TypeError):
>           subtract([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:629: NameError
______________ TestMyTestingCode.test_subtract_memoryview_input _______________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_memoryview_input>

    def test_subtract_memoryview_input(self):
        with self.assertRaises(TypeError):
>           subtract(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:709: NameError
_______________ TestMyTestingCode.test_subtract_negative_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_negative_input>

    def test_subtract_negative_input(self):
        with self.assertRaises(TypeError):
>           subtract(-1)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:548: NameError
______________ TestMyTestingCode.test_subtract_non_numeric_input ______________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_non_numeric_input>

    def test_subtract_non_numeric_input(self):
        with self.assertRaises(TypeError):
>           subtract('a')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:532: NameError
__________________ TestMyTestingCode.test_subtract_set_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_set_input>

    def test_subtract_set_input(self):
        with self.assertRaises(TypeError):
>           subtract({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:661: NameError
________________ TestMyTestingCode.test_subtract_string_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_string_input>

    def test_subtract_string_input(self):
>       self.assertEqual(subtract('a'), 3)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:587: NameError
_________________ TestMyTestingCode.test_subtract_tuple_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_tuple_input>

    def test_subtract_tuple_input(self):
        with self.assertRaises(TypeError):
>           subtract((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:677: NameError
_________________ TestMyTestingCode.test_subtract_zero_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_subtract_zero_input>

    def test_subtract_zero_input(self):
>       self.assertEqual(subtract(0), 5)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:562: NameError
_______________________ TestMyTestingCode.test_word_add _______________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add>

    def test_word_add(self):
>       self.assertEqual(word_add(), 'Hello World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:492: NameError
_________________ TestMyTestingCode.test_word_add_bytes_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_bytes_input>

    def test_word_add_bytes_input(self):
        with self.assertRaises(TypeError):
>           word_add(b'hello')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:701: NameError
________________ TestMyTestingCode.test_word_add_complex_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_complex_input>

    def test_word_add_complex_input(self):
        with self.assertRaises(TypeError):
>           word_add(3+4j)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:621: NameError
_________________ TestMyTestingCode.test_word_add_dict_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_dict_input>

    def test_word_add_dict_input(self):
        with self.assertRaises(TypeError):
>           word_add({'a': 1})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:653: NameError
_________________ TestMyTestingCode.test_word_add_empty_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_empty_input>

    def test_word_add_empty_input(self):
        with self.assertRaises(TypeError):
>           word_add('')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:524: NameError
_________________ TestMyTestingCode.test_word_add_float_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_float_input>

    def test_word_add_float_input(self):
>       self.assertEqual(word_add('3.5'), 'Hello 3.5 World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:605: NameError
________________ TestMyTestingCode.test_word_add_invalid_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_invalid_input>

    def test_word_add_invalid_input(self):
        with self.assertRaises(TypeError):
>           word_add(None)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:508: NameError
_________________ TestMyTestingCode.test_word_add_large_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_large_input>

    def test_word_add_large_input(self):
>       self.assertEqual(word_add('Hello'), 'Hello World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:581: NameError
_________________ TestMyTestingCode.test_word_add_list_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_list_input>

    def test_word_add_list_input(self):
        with self.assertRaises(TypeError):
>           word_add([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:637: NameError
______________ TestMyTestingCode.test_word_add_memoryview_input _______________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_memoryview_input>

    def test_word_add_memoryview_input(self):
        with self.assertRaises(TypeError):
>           word_add(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:717: NameError
_______________ TestMyTestingCode.test_word_add_negative_input ________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_negative_input>

    def test_word_add_negative_input(self):
        with self.assertRaises(TypeError):
>           word_add(-1)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:556: NameError
______________ TestMyTestingCode.test_word_add_non_string_input _______________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_non_string_input>

    def test_word_add_non_string_input(self):
        with self.assertRaises(TypeError):
>           word_add(123)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:540: NameError
__________________ TestMyTestingCode.test_word_add_set_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_set_input>

    def test_word_add_set_input(self):
        with self.assertRaises(TypeError):
>           word_add({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:669: NameError
________________ TestMyTestingCode.test_word_add_string_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_string_input>

    def test_word_add_string_input(self):
>       self.assertEqual(word_add('Hello'), 'Hello World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:593: NameError
_________________ TestMyTestingCode.test_word_add_tuple_input _________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_tuple_input>

    def test_word_add_tuple_input(self):
        with self.assertRaises(TypeError):
>           word_add((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:685: NameError
_________________ TestMyTestingCode.test_word_add_zero_input __________________

self = <my_testing_code.TestMyTestingCode testMethod=test_word_add_zero_input>

    def test_word_add_zero_input(self):
>       self.assertEqual(word_add(0), 'Hello')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:569: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add - NameError: name 'add' ...
FAILED tests/test_tests/my_testing_code.py::test_subtract - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_divide - NameError: name 'di...
FAILED tests/test_tests/my_testing_code.py::test_word_add - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_add_invalid_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_subtract_invalid_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_divide_invalid_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_word_add_invalid_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_add_empty_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_empty_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_empty_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_empty_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_non_numeric_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_subtract_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::test_divide_non_numeric_input - N...
FAILED tests/test_tests/my_testing_code.py::test_word_add_non_string_input - ...
FAILED tests/test_tests/my_testing_code.py::test_add_negative_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_subtract_negative_input - Na...
FAILED tests/test_tests/my_testing_code.py::test_divide_negative_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_word_add_negative_input - Na...
FAILED tests/test_tests/my_testing_code.py::test_add_zero_input - NameError: ...
FAILED tests/test_tests/my_testing_code.py::test_subtract_zero_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_divide_zero_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_word_add_zero_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_add_large_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_large_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_large_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_large_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_string_input - NameError...
FAILED tests/test_tests/my_testing_code.py::test_subtract_string_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_divide_string_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_string_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_add_float_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_float_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_float_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_float_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_complex_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_subtract_complex_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_divide_complex_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_word_add_complex_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_add_list_input - NameError: ...
FAILED tests/test_tests/my_testing_code.py::test_subtract_list_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_divide_list_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_word_add_list_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_add_dict_input - NameError: ...
FAILED tests/test_tests/my_testing_code.py::test_subtract_dict_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_divide_dict_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_word_add_dict_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_add_set_input - NameError: n...
FAILED tests/test_tests/my_testing_code.py::test_subtract_set_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_divide_set_input - NameError...
FAILED tests/test_tests/my_testing_code.py::test_word_add_set_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_add_tuple_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_tuple_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_tuple_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_tuple_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_bytes_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_bytes_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_bytes_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_bytes_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_memoryview_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_subtract_memoryview_input - ...
FAILED tests/test_tests/my_testing_code.py::test_divide_memoryview_input - Na...
FAILED tests/test_tests/my_testing_code.py::test_word_add_memoryview_input - ...
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add - Nam...
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_complex_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_dict_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_empty_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_float_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_large_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_list_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_negative_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_set_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_string_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_add_zero_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide - ...
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_complex_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_dict_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_empty_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_float_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_large_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_list_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_negative_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_set_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_string_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_divide_zero_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_complex_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_dict_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_empty_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_float_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_large_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_list_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_negative_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_set_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_string_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_subtract_zero_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_complex_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_dict_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_empty_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_float_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_large_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_list_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_negative_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_non_string_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_set_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_string_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestMyTestingCode::test_word_add_zero_input
============================= 128 failed in 0.84s =============================


============================================================

============================================================
Test Generation Log - 2025-06-17 12:35:27
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest
import unittest

def test_add():
    assert add() == 5

def test_subtract():
    assert subtract() == 3

def test_divide():
    assert divide() == 5

def test_word_add():
    assert word_add() == 'Hello World'

def test_add_invalid_input():
    with pytest.raises(TypeError):
        add(None)

def test_subtract_invalid_input():
    with pytest.raises(TypeError):
        subtract(None)

def test_divide_invalid_input():
    with pytest.raises(ZeroDivisionError):
        divide(0)

def test_word_add_invalid_input():
    with pytest.raises(TypeError):
        word_add(None)

def test_add_empty_input():
    with pytest.raises(TypeError):
        add('')

def test_subtract_empty_input():
    with pytest.raises(TypeError):
        subtract('')

def test_divide_empty_input():
    with pytest.raises(TypeError):
        divide('')

def test_word_add_empty_input():
    with pytest.raises(TypeError):
        word_add('')

def test_add_non_numeric_input():
    with pytest.raises(TypeError):
        add('a')

def test_subtract_non_numeric_input():
    with pytest.raises(TypeError):
        subtract('a')

def test_divide_non_numeric_input():
    with pytest.raises(TypeError):
        divide('a')

def test_word_add_non_string_input():
    with pytest.raises(TypeError):
        word_add(123)

def test_add_negative_input():
    with pytest.raises(TypeError):
        add(-1)

def test_subtract_negative_input():
    with pytest.raises(TypeError):
        subtract(-1)

def test_divide_negative_input():
    with pytest.raises(ZeroDivisionError):
        divide(-1)

def test_word_add_negative_input():
    with pytest.raises(TypeError):
        word_add(-1)

def test_add_zero_input():
    assert add(0) == 2

def test_subtract_zero_input():
    assert subtract(0) == 5

def test_divide_zero_input():
    with pytest.raises(ZeroDivisionError):
        divide(0)

def test_word_add_zero_input():
    assert word_add(0) == 'Hello'

def test_add_large_input():
    assert add(100) == 103

def test_subtract_large_input():
    assert subtract(100) == 93

def test_divide_large_input():
    assert divide(100) == 5

def test_word_add_large_input():
    assert word_add('Hello') == 'Hello World'

def test_add_string_input():
    assert add('a') == 2

def test_subtract_string_input():
    assert subtract('a') == 3

def test_divide_string_input():
    assert divide('a') == 5

def test_word_add_string_input():
    assert word_add('Hello') == 'Hello World'

def test_add_float_input():
    assert add(3.5) == 6.5

def test_subtract_float_input():
    assert subtract(3.5) == 2.5

def test_divide_float_input():
    assert divide(3.5) == 1.5

def test_word_add_float_input():
    assert word_add('3.5') == 'Hello 3.5 World'

def test_add_complex_input():
    with pytest.raises(TypeError):
        add(3+4j)

def test_subtract_complex_input():
    with pytest.raises(TypeError):
        subtract(3+4j)

def test_divide_complex_input():
    with pytest.raises(ZeroDivisionError):
        divide(3+4j)

def test_word_add_complex_input():
    with pytest.raises(TypeError):
        word_add(3+4j)

def test_add_list_input():
    with pytest.raises(TypeError):
        add([1, 2, 3])

def test_subtract_list_input():
    with pytest.raises(TypeError):
        subtract([1, 2, 3])

def test_divide_list_input():
    with pytest.raises(ZeroDivisionError):
        divide([1, 2, 3])

def test_word_add_list_input():
    with pytest.raises(TypeError):
        word_add([1, 2, 3])

def test_add_dict_input():
    with pytest.raises(TypeError):
        add({'a': 1})

def test_subtract_dict_input():
    with pytest.raises(TypeError):
        subtract({'a': 1})

def test_divide_dict_input():
    with pytest.raises(ZeroDivisionError):
        divide({'a': 1})

def test_word_add_dict_input():
    with pytest.raises(TypeError):
        word_add({'a': 1})

def test_add_set_input():
    with pytest.raises(TypeError):
        add({1, 2, 3})

def test_subtract_set_input():
    with pytest.raises(TypeError):
        subtract({1, 2, 3})

def test_divide_set_input():
    with pytest.raises(ZeroDivisionError):
        divide({1, 2, 3})

def test_word_add_set_input():
    with pytest.raises(TypeError):
        word_add({1, 2, 3})

def test_add_tuple_input():
    with pytest.raises(TypeError):
        add((1, 2, 3))

def test_subtract_tuple_input():
    with pytest.raises(TypeError):
        subtract((1, 2, 3))

def test_divide_tuple_input():
    with pytest.raises(ZeroDivisionError):
        divide((1, 2, 3))

def test_word_add_tuple_input():
    with pytest.raises(TypeError):
        word_add((1, 2, 3))

def test_add_bytes_input():
    with pytest.raises(TypeError):
        add(b'hello')

def test_subtract_bytes_input():
    with pytest.raises(TypeError):
        subtract(b'hello')

def test_divide_bytes_input():
    with pytest.raises(ZeroDivisionError):
        divide(b'hello')

def test_word_add_bytes_input():
    with pytest.raises(TypeError):
        word_add(b'hello')

def test_add_memoryview_input():
    with pytest.raises(TypeError):
        add(memoryview(b'hello'))

def test_subtract_memoryview_input():
    with pytest.raises(TypeError):
        subtract(memoryview(b'hello'))

def test_divide_memoryview_input():
    with pytest.raises(ZeroDivisionError):
        divide(memoryview(b'hello'))

def test_word_add_memoryview_input():
    with pytest.raises(TypeError):
        word_add(memoryview(b'hello'))

class TestAdd(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(), 5)

    def test_add_invalid_input(self):
        with self.assertRaises(TypeError):
            add(None)

    def test_add_empty_input(self):
        with self.assertRaises(TypeError):
            add('')

    def test_add_non_numeric_input(self):
        with self.assertRaises(TypeError):
            add('a')

    def test_add_negative_input(self):
        with self.assertRaises(TypeError):
            add(-1)

    def test_add_zero_input(self):
        self.assertEqual(add(0), 2)

    def test_add_large_input(self):
        self.assertEqual(add(100), 103)

    def test_add_string_input(self):
        self.assertEqual(add('a'), 2)

    def test_add_float_input(self):
        self.assertEqual(add(3.5), 6.5)

    def test_add_complex_input(self):
        with self.assertRaises(TypeError):
            add(3+4j)

    def test_add_list_input(self):
        with self.assertRaises(TypeError):
            add([1, 2, 3])

    def test_add_dict_input(self):
        with self.assertRaises(TypeError):
            add({'a': 1})

    def test_add_set_input(self):
        with self.assertRaises(TypeError):
            add({1, 2, 3})

    def test_add_tuple_input(self):
        with self.assertRaises(TypeError):
            add((1, 2, 3))

    def test_add_bytes_input(self):
        with self.assertRaises(TypeError):
            add(b'hello')

    def test_add_memoryview_input(self):
        with self.assertRaises(TypeError):
            add(memoryview(b'hello'))

class TestSubtract(unittest.TestCase):
    def test_subtract(self):
        self.assertEqual(subtract(), 3)

    def test_subtract_invalid_input(self):
        with self.assertRaises(TypeError):
            subtract(None)

    def test_subtract_empty_input(self):
        with self.assertRaises(TypeError):
            subtract('')

    def test_subtract_non_numeric_input(self):
        with self.assertRaises(TypeError):
            subtract('a')

    def test_subtract_negative_input(self):
        with self.assertRaises(TypeError):
            subtract(-1)

    def test_subtract_zero_input(self):
        self.assertEqual(subtract(0), 5)

    def test_subtract_large_input(self):
        self.assertEqual(subtract(100), 93)

    def test_subtract_string_input(self):
        self.assertEqual(subtract('a'), 3)

    def test_subtract_float_input(self):
        self.assertEqual(subtract(3.5), 2.5)

    def test_subtract_complex_input(self):
        with self.assertRaises(TypeError):
            subtract(3+4j)

    def test_subtract_list_input(self):
        with self.assertRaises(TypeError):
            subtract([1, 2, 3])

    def test_subtract_dict_input(self):
        with self.assertRaises(TypeError):
            subtract({'a': 1})

    def test_subtract_set_input(self):
        with self.assertRaises(TypeError):
            subtract({1, 2, 3})

    def test_subtract_tuple_input(self):
        with self.assertRaises(TypeError):
            subtract((1, 2, 3))

    def test_subtract_bytes_input(self):
        with self.assertRaises(TypeError):
            subtract(b'hello')

    def test_subtract_memoryview_input(self):
        with self.assertRaises(TypeError):
            subtract(memoryview(b'hello'))

class TestDivide(unittest.TestCase):
    def test_divide(self):
        self.assertEqual(divide(), 5)

    def test_divide_invalid_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0)

    def test_divide_empty_input(self):
        with self.assertRaises(TypeError):
            divide('')

    def test_divide_non_numeric_input(self):
        with self.assertRaises(TypeError):
            divide('a')

    def test_divide_negative_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-1)

    def test_divide_zero_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0)

    def test_divide_large_input(self):
        self.assertEqual(divide(100), 5)

    def test_divide_string_input(self):
        self.assertEqual(divide('a'), 5)

    def test_divide_float_input(self):
        self.assertEqual(divide(3.5), 1.5)

    def test_divide_complex_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(3+4j)

    def test_divide_list_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide([1, 2, 3])

    def test_divide_dict_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide({'a': 1})

    def test_divide_set_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide({1, 2, 3})

    def test_divide_tuple_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide((1, 2, 3))

    def test_divide_bytes_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(b'hello')

    def test_divide_memoryview_input(self):
        with self.assertRaises(ZeroDivisionError):
            divide(memoryview(b'hello'))

class TestWordAdd(unittest.TestCase):
    def test_word_add(self):
        self.assertEqual(word_add(), 'Hello World')

    def test_word_add_invalid_input(self):
        with self.assertRaises(TypeError):
            word_add(None)

    def test_word_add_empty_input(self):
        with self.assertRaises(TypeError):
            word_add('')

    def test_word_add_non_string_input(self):
        with self.assertRaises(TypeError):
            word_add(123)

    def test_word_add_negative_input(self):
        with self.assertRaises(TypeError):
            word_add(-1)

    def test_word_add_zero_input(self):
        self.assertEqual(word_add(0), 'Hello')

    def test_word_add_large_input(self):
        self.assertEqual(word_add('Hello'), 'Hello World')

    def test_word_add_string_input(self):
        self.assertEqual(word_add('Hello'), 'Hello World')

    def test_word_add_float_input(self):
        self.assertEqual(word_add('3.5'), 'Hello 3.5 World')

    def test_word_add_complex_input(self):
        with self.assertRaises(TypeError):
            word_add(3+4j)

    def test_word_add_list_input(self):
        with self.assertRaises(TypeError):
            word_add([1, 2, 3])

    def test_word_add_dict_input(self):
        with self.assertRaises(TypeError):
            word_add({'a': 1})

    def test_word_add_set_input(self):
        with self.assertRaises(TypeError):
            word_add({1, 2, 3})

    def test_word_add_tuple_input(self):
        with self.assertRaises(TypeError):
            word_add((1, 2, 3))

    def test_word_add_bytes_input(self):
        with self.assertRaises(TypeError):
            word_add(b'hello')

    def test_word_add_memoryview_input(self):
        with self.assertRaises(TypeError):
            word_add(memoryview(b'hello'))

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 128 items

tests\test_tests\my_testing_code.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 28%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 84%]
FFFFFFFFFFFFFFFFFFFF                                                     [100%]

================================== FAILURES ===================================
__________________________________ test_add ___________________________________

    def test_add():
>       assert add() == 5
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:5: NameError
________________________________ test_subtract ________________________________

    def test_subtract():
>       assert subtract() == 3
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:8: NameError
_________________________________ test_divide _________________________________

    def test_divide():
>       assert divide() == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:11: NameError
________________________________ test_word_add ________________________________

    def test_word_add():
>       assert word_add() == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:14: NameError
___________________________ test_add_invalid_input ____________________________

    def test_add_invalid_input():
        with pytest.raises(TypeError):
>           add(None)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:18: NameError
_________________________ test_subtract_invalid_input _________________________

    def test_subtract_invalid_input():
        with pytest.raises(TypeError):
>           subtract(None)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:22: NameError
__________________________ test_divide_invalid_input __________________________

    def test_divide_invalid_input():
        with pytest.raises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:26: NameError
_________________________ test_word_add_invalid_input _________________________

    def test_word_add_invalid_input():
        with pytest.raises(TypeError):
>           word_add(None)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:30: NameError
____________________________ test_add_empty_input _____________________________

    def test_add_empty_input():
        with pytest.raises(TypeError):
>           add('')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:34: NameError
__________________________ test_subtract_empty_input __________________________

    def test_subtract_empty_input():
        with pytest.raises(TypeError):
>           subtract('')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:38: NameError
___________________________ test_divide_empty_input ___________________________

    def test_divide_empty_input():
        with pytest.raises(TypeError):
>           divide('')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:42: NameError
__________________________ test_word_add_empty_input __________________________

    def test_word_add_empty_input():
        with pytest.raises(TypeError):
>           word_add('')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:46: NameError
_________________________ test_add_non_numeric_input __________________________

    def test_add_non_numeric_input():
        with pytest.raises(TypeError):
>           add('a')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:50: NameError
_______________________ test_subtract_non_numeric_input _______________________

    def test_subtract_non_numeric_input():
        with pytest.raises(TypeError):
>           subtract('a')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:54: NameError
________________________ test_divide_non_numeric_input ________________________

    def test_divide_non_numeric_input():
        with pytest.raises(TypeError):
>           divide('a')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:58: NameError
_______________________ test_word_add_non_string_input ________________________

    def test_word_add_non_string_input():
        with pytest.raises(TypeError):
>           word_add(123)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:62: NameError
___________________________ test_add_negative_input ___________________________

    def test_add_negative_input():
        with pytest.raises(TypeError):
>           add(-1)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:66: NameError
________________________ test_subtract_negative_input _________________________

    def test_subtract_negative_input():
        with pytest.raises(TypeError):
>           subtract(-1)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:70: NameError
_________________________ test_divide_negative_input __________________________

    def test_divide_negative_input():
        with pytest.raises(ZeroDivisionError):
>           divide(-1)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:74: NameError
________________________ test_word_add_negative_input _________________________

    def test_word_add_negative_input():
        with pytest.raises(TypeError):
>           word_add(-1)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:78: NameError
_____________________________ test_add_zero_input _____________________________

    def test_add_zero_input():
>       assert add(0) == 2
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:81: NameError
__________________________ test_subtract_zero_input ___________________________

    def test_subtract_zero_input():
>       assert subtract(0) == 5
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:84: NameError
___________________________ test_divide_zero_input ____________________________

    def test_divide_zero_input():
        with pytest.raises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:88: NameError
__________________________ test_word_add_zero_input ___________________________

    def test_word_add_zero_input():
>       assert word_add(0) == 'Hello'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:91: NameError
____________________________ test_add_large_input _____________________________

    def test_add_large_input():
>       assert add(100) == 103
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:94: NameError
__________________________ test_subtract_large_input __________________________

    def test_subtract_large_input():
>       assert subtract(100) == 93
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:97: NameError
___________________________ test_divide_large_input ___________________________

    def test_divide_large_input():
>       assert divide(100) == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:100: NameError
__________________________ test_word_add_large_input __________________________

    def test_word_add_large_input():
>       assert word_add('Hello') == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:103: NameError
____________________________ test_add_string_input ____________________________

    def test_add_string_input():
>       assert add('a') == 2
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:106: NameError
_________________________ test_subtract_string_input __________________________

    def test_subtract_string_input():
>       assert subtract('a') == 3
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:109: NameError
__________________________ test_divide_string_input ___________________________

    def test_divide_string_input():
>       assert divide('a') == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:112: NameError
_________________________ test_word_add_string_input __________________________

    def test_word_add_string_input():
>       assert word_add('Hello') == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:115: NameError
____________________________ test_add_float_input _____________________________

    def test_add_float_input():
>       assert add(3.5) == 6.5
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:118: NameError
__________________________ test_subtract_float_input __________________________

    def test_subtract_float_input():
>       assert subtract(3.5) == 2.5
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:121: NameError
___________________________ test_divide_float_input ___________________________

    def test_divide_float_input():
>       assert divide(3.5) == 1.5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:124: NameError
__________________________ test_word_add_float_input __________________________

    def test_word_add_float_input():
>       assert word_add('3.5') == 'Hello 3.5 World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:127: NameError
___________________________ test_add_complex_input ____________________________

    def test_add_complex_input():
        with pytest.raises(TypeError):
>           add(3+4j)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:131: NameError
_________________________ test_subtract_complex_input _________________________

    def test_subtract_complex_input():
        with pytest.raises(TypeError):
>           subtract(3+4j)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:135: NameError
__________________________ test_divide_complex_input __________________________

    def test_divide_complex_input():
        with pytest.raises(ZeroDivisionError):
>           divide(3+4j)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:139: NameError
_________________________ test_word_add_complex_input _________________________

    def test_word_add_complex_input():
        with pytest.raises(TypeError):
>           word_add(3+4j)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:143: NameError
_____________________________ test_add_list_input _____________________________

    def test_add_list_input():
        with pytest.raises(TypeError):
>           add([1, 2, 3])
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:147: NameError
__________________________ test_subtract_list_input ___________________________

    def test_subtract_list_input():
        with pytest.raises(TypeError):
>           subtract([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:151: NameError
___________________________ test_divide_list_input ____________________________

    def test_divide_list_input():
        with pytest.raises(ZeroDivisionError):
>           divide([1, 2, 3])
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:155: NameError
__________________________ test_word_add_list_input ___________________________

    def test_word_add_list_input():
        with pytest.raises(TypeError):
>           word_add([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:159: NameError
_____________________________ test_add_dict_input _____________________________

    def test_add_dict_input():
        with pytest.raises(TypeError):
>           add({'a': 1})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:163: NameError
__________________________ test_subtract_dict_input ___________________________

    def test_subtract_dict_input():
        with pytest.raises(TypeError):
>           subtract({'a': 1})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:167: NameError
___________________________ test_divide_dict_input ____________________________

    def test_divide_dict_input():
        with pytest.raises(ZeroDivisionError):
>           divide({'a': 1})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:171: NameError
__________________________ test_word_add_dict_input ___________________________

    def test_word_add_dict_input():
        with pytest.raises(TypeError):
>           word_add({'a': 1})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:175: NameError
_____________________________ test_add_set_input ______________________________

    def test_add_set_input():
        with pytest.raises(TypeError):
>           add({1, 2, 3})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:179: NameError
___________________________ test_subtract_set_input ___________________________

    def test_subtract_set_input():
        with pytest.raises(TypeError):
>           subtract({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:183: NameError
____________________________ test_divide_set_input ____________________________

    def test_divide_set_input():
        with pytest.raises(ZeroDivisionError):
>           divide({1, 2, 3})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:187: NameError
___________________________ test_word_add_set_input ___________________________

    def test_word_add_set_input():
        with pytest.raises(TypeError):
>           word_add({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:191: NameError
____________________________ test_add_tuple_input _____________________________

    def test_add_tuple_input():
        with pytest.raises(TypeError):
>           add((1, 2, 3))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:195: NameError
__________________________ test_subtract_tuple_input __________________________

    def test_subtract_tuple_input():
        with pytest.raises(TypeError):
>           subtract((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:199: NameError
___________________________ test_divide_tuple_input ___________________________

    def test_divide_tuple_input():
        with pytest.raises(ZeroDivisionError):
>           divide((1, 2, 3))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:203: NameError
__________________________ test_word_add_tuple_input __________________________

    def test_word_add_tuple_input():
        with pytest.raises(TypeError):
>           word_add((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:207: NameError
____________________________ test_add_bytes_input _____________________________

    def test_add_bytes_input():
        with pytest.raises(TypeError):
>           add(b'hello')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:211: NameError
__________________________ test_subtract_bytes_input __________________________

    def test_subtract_bytes_input():
        with pytest.raises(TypeError):
>           subtract(b'hello')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:215: NameError
___________________________ test_divide_bytes_input ___________________________

    def test_divide_bytes_input():
        with pytest.raises(ZeroDivisionError):
>           divide(b'hello')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:219: NameError
__________________________ test_word_add_bytes_input __________________________

    def test_word_add_bytes_input():
        with pytest.raises(TypeError):
>           word_add(b'hello')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:223: NameError
__________________________ test_add_memoryview_input __________________________

    def test_add_memoryview_input():
        with pytest.raises(TypeError):
>           add(memoryview(b'hello'))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:227: NameError
_______________________ test_subtract_memoryview_input ________________________

    def test_subtract_memoryview_input():
        with pytest.raises(TypeError):
>           subtract(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:231: NameError
________________________ test_divide_memoryview_input _________________________

    def test_divide_memoryview_input():
        with pytest.raises(ZeroDivisionError):
>           divide(memoryview(b'hello'))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:235: NameError
_______________________ test_word_add_memoryview_input ________________________

    def test_word_add_memoryview_input():
        with pytest.raises(TypeError):
>           word_add(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:239: NameError
______________________________ TestAdd.test_add _______________________________

self = <my_testing_code.TestAdd testMethod=test_add>

    def test_add(self):
>       self.assertEqual(add(), 5)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:243: NameError
________________________ TestAdd.test_add_bytes_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_bytes_input>

    def test_add_bytes_input(self):
        with self.assertRaises(TypeError):
>           add(b'hello')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:295: NameError
_______________________ TestAdd.test_add_complex_input ________________________

self = <my_testing_code.TestAdd testMethod=test_add_complex_input>

    def test_add_complex_input(self):
        with self.assertRaises(TypeError):
>           add(3+4j)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:275: NameError
_________________________ TestAdd.test_add_dict_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_dict_input>

    def test_add_dict_input(self):
        with self.assertRaises(TypeError):
>           add({'a': 1})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:283: NameError
________________________ TestAdd.test_add_empty_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_empty_input>

    def test_add_empty_input(self):
        with self.assertRaises(TypeError):
>           add('')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:251: NameError
________________________ TestAdd.test_add_float_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_float_input>

    def test_add_float_input(self):
>       self.assertEqual(add(3.5), 6.5)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:271: NameError
_______________________ TestAdd.test_add_invalid_input ________________________

self = <my_testing_code.TestAdd testMethod=test_add_invalid_input>

    def test_add_invalid_input(self):
        with self.assertRaises(TypeError):
>           add(None)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:247: NameError
________________________ TestAdd.test_add_large_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_large_input>

    def test_add_large_input(self):
>       self.assertEqual(add(100), 103)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:265: NameError
_________________________ TestAdd.test_add_list_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_list_input>

    def test_add_list_input(self):
        with self.assertRaises(TypeError):
>           add([1, 2, 3])
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:279: NameError
______________________ TestAdd.test_add_memoryview_input ______________________

self = <my_testing_code.TestAdd testMethod=test_add_memoryview_input>

    def test_add_memoryview_input(self):
        with self.assertRaises(TypeError):
>           add(memoryview(b'hello'))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:299: NameError
_______________________ TestAdd.test_add_negative_input _______________________

self = <my_testing_code.TestAdd testMethod=test_add_negative_input>

    def test_add_negative_input(self):
        with self.assertRaises(TypeError):
>           add(-1)
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:259: NameError
_____________________ TestAdd.test_add_non_numeric_input ______________________

self = <my_testing_code.TestAdd testMethod=test_add_non_numeric_input>

    def test_add_non_numeric_input(self):
        with self.assertRaises(TypeError):
>           add('a')
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:255: NameError
_________________________ TestAdd.test_add_set_input __________________________

self = <my_testing_code.TestAdd testMethod=test_add_set_input>

    def test_add_set_input(self):
        with self.assertRaises(TypeError):
>           add({1, 2, 3})
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:287: NameError
________________________ TestAdd.test_add_string_input ________________________

self = <my_testing_code.TestAdd testMethod=test_add_string_input>

    def test_add_string_input(self):
>       self.assertEqual(add('a'), 2)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:268: NameError
________________________ TestAdd.test_add_tuple_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_tuple_input>

    def test_add_tuple_input(self):
        with self.assertRaises(TypeError):
>           add((1, 2, 3))
            ^^^
E           NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:291: NameError
_________________________ TestAdd.test_add_zero_input _________________________

self = <my_testing_code.TestAdd testMethod=test_add_zero_input>

    def test_add_zero_input(self):
>       self.assertEqual(add(0), 2)
                         ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:262: NameError
_________________________ TestSubtract.test_subtract __________________________

self = <my_testing_code.TestSubtract testMethod=test_subtract>

    def test_subtract(self):
>       self.assertEqual(subtract(), 3)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:303: NameError
___________________ TestSubtract.test_subtract_bytes_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_bytes_input>

    def test_subtract_bytes_input(self):
        with self.assertRaises(TypeError):
>           subtract(b'hello')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:355: NameError
__________________ TestSubtract.test_subtract_complex_input ___________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_complex_input>

    def test_subtract_complex_input(self):
        with self.assertRaises(TypeError):
>           subtract(3+4j)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:335: NameError
____________________ TestSubtract.test_subtract_dict_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_dict_input>

    def test_subtract_dict_input(self):
        with self.assertRaises(TypeError):
>           subtract({'a': 1})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:343: NameError
___________________ TestSubtract.test_subtract_empty_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_empty_input>

    def test_subtract_empty_input(self):
        with self.assertRaises(TypeError):
>           subtract('')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:311: NameError
___________________ TestSubtract.test_subtract_float_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_float_input>

    def test_subtract_float_input(self):
>       self.assertEqual(subtract(3.5), 2.5)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:331: NameError
__________________ TestSubtract.test_subtract_invalid_input ___________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_invalid_input>

    def test_subtract_invalid_input(self):
        with self.assertRaises(TypeError):
>           subtract(None)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:307: NameError
___________________ TestSubtract.test_subtract_large_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_large_input>

    def test_subtract_large_input(self):
>       self.assertEqual(subtract(100), 93)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:325: NameError
____________________ TestSubtract.test_subtract_list_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_list_input>

    def test_subtract_list_input(self):
        with self.assertRaises(TypeError):
>           subtract([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:339: NameError
_________________ TestSubtract.test_subtract_memoryview_input _________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_memoryview_input>

    def test_subtract_memoryview_input(self):
        with self.assertRaises(TypeError):
>           subtract(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:359: NameError
__________________ TestSubtract.test_subtract_negative_input __________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_negative_input>

    def test_subtract_negative_input(self):
        with self.assertRaises(TypeError):
>           subtract(-1)
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:319: NameError
________________ TestSubtract.test_subtract_non_numeric_input _________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_non_numeric_input>

    def test_subtract_non_numeric_input(self):
        with self.assertRaises(TypeError):
>           subtract('a')
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:315: NameError
____________________ TestSubtract.test_subtract_set_input _____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_set_input>

    def test_subtract_set_input(self):
        with self.assertRaises(TypeError):
>           subtract({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:347: NameError
___________________ TestSubtract.test_subtract_string_input ___________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_string_input>

    def test_subtract_string_input(self):
>       self.assertEqual(subtract('a'), 3)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:328: NameError
___________________ TestSubtract.test_subtract_tuple_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_tuple_input>

    def test_subtract_tuple_input(self):
        with self.assertRaises(TypeError):
>           subtract((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:351: NameError
____________________ TestSubtract.test_subtract_zero_input ____________________

self = <my_testing_code.TestSubtract testMethod=test_subtract_zero_input>

    def test_subtract_zero_input(self):
>       self.assertEqual(subtract(0), 5)
                         ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:322: NameError
___________________________ TestDivide.test_divide ____________________________

self = <my_testing_code.TestDivide testMethod=test_divide>

    def test_divide(self):
>       self.assertEqual(divide(), 5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:363: NameError
_____________________ TestDivide.test_divide_bytes_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_bytes_input>

    def test_divide_bytes_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(b'hello')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:416: NameError
____________________ TestDivide.test_divide_complex_input _____________________

self = <my_testing_code.TestDivide testMethod=test_divide_complex_input>

    def test_divide_complex_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(3+4j)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:396: NameError
______________________ TestDivide.test_divide_dict_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_dict_input>

    def test_divide_dict_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide({'a': 1})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:404: NameError
_____________________ TestDivide.test_divide_empty_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_empty_input>

    def test_divide_empty_input(self):
        with self.assertRaises(TypeError):
>           divide('')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:371: NameError
_____________________ TestDivide.test_divide_float_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_float_input>

    def test_divide_float_input(self):
>       self.assertEqual(divide(3.5), 1.5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:392: NameError
____________________ TestDivide.test_divide_invalid_input _____________________

self = <my_testing_code.TestDivide testMethod=test_divide_invalid_input>

    def test_divide_invalid_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:367: NameError
_____________________ TestDivide.test_divide_large_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_large_input>

    def test_divide_large_input(self):
>       self.assertEqual(divide(100), 5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:386: NameError
______________________ TestDivide.test_divide_list_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_list_input>

    def test_divide_list_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide([1, 2, 3])
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:400: NameError
___________________ TestDivide.test_divide_memoryview_input ___________________

self = <my_testing_code.TestDivide testMethod=test_divide_memoryview_input>

    def test_divide_memoryview_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(memoryview(b'hello'))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:420: NameError
____________________ TestDivide.test_divide_negative_input ____________________

self = <my_testing_code.TestDivide testMethod=test_divide_negative_input>

    def test_divide_negative_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(-1)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:379: NameError
__________________ TestDivide.test_divide_non_numeric_input ___________________

self = <my_testing_code.TestDivide testMethod=test_divide_non_numeric_input>

    def test_divide_non_numeric_input(self):
        with self.assertRaises(TypeError):
>           divide('a')
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:375: NameError
______________________ TestDivide.test_divide_set_input _______________________

self = <my_testing_code.TestDivide testMethod=test_divide_set_input>

    def test_divide_set_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide({1, 2, 3})
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:408: NameError
_____________________ TestDivide.test_divide_string_input _____________________

self = <my_testing_code.TestDivide testMethod=test_divide_string_input>

    def test_divide_string_input(self):
>       self.assertEqual(divide('a'), 5)
                         ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:389: NameError
_____________________ TestDivide.test_divide_tuple_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_tuple_input>

    def test_divide_tuple_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide((1, 2, 3))
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:412: NameError
______________________ TestDivide.test_divide_zero_input ______________________

self = <my_testing_code.TestDivide testMethod=test_divide_zero_input>

    def test_divide_zero_input(self):
        with self.assertRaises(ZeroDivisionError):
>           divide(0)
            ^^^^^^
E           NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:383: NameError
__________________________ TestWordAdd.test_word_add __________________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add>

    def test_word_add(self):
>       self.assertEqual(word_add(), 'Hello World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:424: NameError
____________________ TestWordAdd.test_word_add_bytes_input ____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_bytes_input>

    def test_word_add_bytes_input(self):
        with self.assertRaises(TypeError):
>           word_add(b'hello')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:476: NameError
___________________ TestWordAdd.test_word_add_complex_input ___________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_complex_input>

    def test_word_add_complex_input(self):
        with self.assertRaises(TypeError):
>           word_add(3+4j)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:456: NameError
____________________ TestWordAdd.test_word_add_dict_input _____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_dict_input>

    def test_word_add_dict_input(self):
        with self.assertRaises(TypeError):
>           word_add({'a': 1})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:464: NameError
____________________ TestWordAdd.test_word_add_empty_input ____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_empty_input>

    def test_word_add_empty_input(self):
        with self.assertRaises(TypeError):
>           word_add('')
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:432: NameError
____________________ TestWordAdd.test_word_add_float_input ____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_float_input>

    def test_word_add_float_input(self):
>       self.assertEqual(word_add('3.5'), 'Hello 3.5 World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:452: NameError
___________________ TestWordAdd.test_word_add_invalid_input ___________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_invalid_input>

    def test_word_add_invalid_input(self):
        with self.assertRaises(TypeError):
>           word_add(None)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:428: NameError
____________________ TestWordAdd.test_word_add_large_input ____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_large_input>

    def test_word_add_large_input(self):
>       self.assertEqual(word_add('Hello'), 'Hello World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:446: NameError
____________________ TestWordAdd.test_word_add_list_input _____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_list_input>

    def test_word_add_list_input(self):
        with self.assertRaises(TypeError):
>           word_add([1, 2, 3])
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:460: NameError
_________________ TestWordAdd.test_word_add_memoryview_input __________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_memoryview_input>

    def test_word_add_memoryview_input(self):
        with self.assertRaises(TypeError):
>           word_add(memoryview(b'hello'))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:480: NameError
__________________ TestWordAdd.test_word_add_negative_input ___________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_negative_input>

    def test_word_add_negative_input(self):
        with self.assertRaises(TypeError):
>           word_add(-1)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:440: NameError
_________________ TestWordAdd.test_word_add_non_string_input __________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_non_string_input>

    def test_word_add_non_string_input(self):
        with self.assertRaises(TypeError):
>           word_add(123)
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:436: NameError
_____________________ TestWordAdd.test_word_add_set_input _____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_set_input>

    def test_word_add_set_input(self):
        with self.assertRaises(TypeError):
>           word_add({1, 2, 3})
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:468: NameError
___________________ TestWordAdd.test_word_add_string_input ____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_string_input>

    def test_word_add_string_input(self):
>       self.assertEqual(word_add('Hello'), 'Hello World')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:449: NameError
____________________ TestWordAdd.test_word_add_tuple_input ____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_tuple_input>

    def test_word_add_tuple_input(self):
        with self.assertRaises(TypeError):
>           word_add((1, 2, 3))
            ^^^^^^^^
E           NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:472: NameError
____________________ TestWordAdd.test_word_add_zero_input _____________________

self = <my_testing_code.TestWordAdd testMethod=test_word_add_zero_input>

    def test_word_add_zero_input(self):
>       self.assertEqual(word_add(0), 'Hello')
                         ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:443: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add - NameError: name 'add' ...
FAILED tests/test_tests/my_testing_code.py::test_subtract - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_divide - NameError: name 'di...
FAILED tests/test_tests/my_testing_code.py::test_word_add - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_add_invalid_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_subtract_invalid_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_divide_invalid_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_word_add_invalid_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_add_empty_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_empty_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_empty_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_empty_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_non_numeric_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_subtract_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::test_divide_non_numeric_input - N...
FAILED tests/test_tests/my_testing_code.py::test_word_add_non_string_input - ...
FAILED tests/test_tests/my_testing_code.py::test_add_negative_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_subtract_negative_input - Na...
FAILED tests/test_tests/my_testing_code.py::test_divide_negative_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_word_add_negative_input - Na...
FAILED tests/test_tests/my_testing_code.py::test_add_zero_input - NameError: ...
FAILED tests/test_tests/my_testing_code.py::test_subtract_zero_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_divide_zero_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_word_add_zero_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_add_large_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_large_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_large_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_large_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_string_input - NameError...
FAILED tests/test_tests/my_testing_code.py::test_subtract_string_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_divide_string_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_string_input - Name...
FAILED tests/test_tests/my_testing_code.py::test_add_float_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_float_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_float_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_float_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_complex_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_subtract_complex_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_divide_complex_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_word_add_complex_input - Nam...
FAILED tests/test_tests/my_testing_code.py::test_add_list_input - NameError: ...
FAILED tests/test_tests/my_testing_code.py::test_subtract_list_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_divide_list_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_word_add_list_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_add_dict_input - NameError: ...
FAILED tests/test_tests/my_testing_code.py::test_subtract_dict_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_divide_dict_input - NameErro...
FAILED tests/test_tests/my_testing_code.py::test_word_add_dict_input - NameEr...
FAILED tests/test_tests/my_testing_code.py::test_add_set_input - NameError: n...
FAILED tests/test_tests/my_testing_code.py::test_subtract_set_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_divide_set_input - NameError...
FAILED tests/test_tests/my_testing_code.py::test_word_add_set_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_add_tuple_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_tuple_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_tuple_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_tuple_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_bytes_input - NameError:...
FAILED tests/test_tests/my_testing_code.py::test_subtract_bytes_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_divide_bytes_input - NameErr...
FAILED tests/test_tests/my_testing_code.py::test_word_add_bytes_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_add_memoryview_input - NameE...
FAILED tests/test_tests/my_testing_code.py::test_subtract_memoryview_input - ...
FAILED tests/test_tests/my_testing_code.py::test_divide_memoryview_input - Na...
FAILED tests/test_tests/my_testing_code.py::test_word_add_memoryview_input - ...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add - NameError: na...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_bytes_input - N...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_complex_input
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_dict_input - Na...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_empty_input - N...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_float_input - N...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_large_input - N...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_list_input - Na...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_negative_input
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_set_input - Nam...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_string_input - ...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_tuple_input - N...
FAILED tests/test_tests/my_testing_code.py::TestAdd::test_add_zero_input - Na...
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract - Nam...
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_complex_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_dict_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_empty_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_float_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_large_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_list_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_negative_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_set_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_string_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestSubtract::test_subtract_zero_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide - NameErr...
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_complex_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_dict_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_empty_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_float_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_large_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_list_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_negative_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_non_numeric_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_set_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_string_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestDivide::test_divide_zero_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add - Name...
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_bytes_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_complex_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_dict_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_empty_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_float_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_invalid_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_large_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_list_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_memoryview_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_negative_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_non_string_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_set_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_string_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_tuple_input
FAILED tests/test_tests/my_testing_code.py::TestWordAdd::test_word_add_zero_input
============================= 128 failed in 0.61s =============================


============================================================

============================================================
Test Generation Log - 2025-06-17 12:49:11
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"


Generated Test Cases:
------------------------------
import pytest

def test_add():
    assert add() == 5

def test_subtract():
    assert subtract() == 3

def test_divide():
    assert divide() == 5

def test_word_add():
    assert word_add() == 'Hello World'

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 4 items

tests\test_tests\my_testing_code.py FFFF                                 [100%]

================================== FAILURES ===================================
__________________________________ test_add ___________________________________

    def test_add():
>       assert add() == 5
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:4: NameError
________________________________ test_subtract ________________________________

    def test_subtract():
>       assert subtract() == 3
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:7: NameError
_________________________________ test_divide _________________________________

    def test_divide():
>       assert divide() == 5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:10: NameError
________________________________ test_word_add ________________________________

    def test_word_add():
>       assert word_add() == 'Hello World'
               ^^^^^^^^
E       NameError: name 'word_add' is not defined

tests\test_tests\my_testing_code.py:13: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add - NameError: name 'add' ...
FAILED tests/test_tests/my_testing_code.py::test_subtract - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_divide - NameError: name 'di...
FAILED tests/test_tests/my_testing_code.py::test_word_add - NameError: name '...
============================== 4 failed in 0.04s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:10:32
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add():
    return 2+3

def subtract():
    return 5-2

def divide():
    return 10/2

def word_add():
    return "Hello" + " World"




Generated Test Cases:
------------------------------
```python
import pytest

def test_add():
    assert add() == 5

def test_add_invalid():
    with pytest.raises(TypeError):
        add(None)

def test_subtract():
    assert subtract() == 3

def test_subtract_invalid():
    with pytest.raises(TypeError):
        subtract(None)

def test_divide():
    assert divide() == 5

def test_divide_invalid():
    with pytest.raises(ZeroDivisionError):
        divide(0)

def test_word_add():
    assert word_add() == "Hello World"

def test_word_add_invalid():
    with pytest.raises(TypeError):
        word_add(None)
```

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
my_venv\Lib\site-packages\_pytest\python.py:497: in importtestmodule
    mod = import_path(
my_venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
my_venv\Lib\site-packages\_pytest\assertion\rewrite.py:357: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\ast.py:52: in parse
    return compile(source, filename, mode, flags,
E     File "E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\my_testing_code.py", line 1
E       ```python
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.13s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:37:06
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(TypeError):
        add('a', 2)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(TypeError):
        subtract('a', 2)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(TypeError):
        multiply('a', 2)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)
    with pytest.raises(TypeError):
        divide('a', 2)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 4 items

tests\test_tests\my_testing_code.py FFFF                                 [100%]

================================== FAILURES ===================================
__________________________________ test_add ___________________________________

    def test_add():
>       assert add(1, 2) == 3
               ^^^
E       NameError: name 'add' is not defined

tests\test_tests\my_testing_code.py:4: NameError
________________________________ test_subtract ________________________________

    def test_subtract():
>       assert subtract(1, 2) == -1
               ^^^^^^^^
E       NameError: name 'subtract' is not defined

tests\test_tests\my_testing_code.py:10: NameError
________________________________ test_multiply ________________________________

    def test_multiply():
>       assert multiply(1, 2) == 2
               ^^^^^^^^
E       NameError: name 'multiply' is not defined

tests\test_tests\my_testing_code.py:16: NameError
_________________________________ test_divide _________________________________

    def test_divide():
>       assert divide(1, 2) == 0.5
               ^^^^^^
E       NameError: name 'divide' is not defined

tests\test_tests\my_testing_code.py:22: NameError
=========================== short test summary info ===========================
FAILED tests/test_tests/my_testing_code.py::test_add - NameError: name 'add' ...
FAILED tests/test_tests/my_testing_code.py::test_subtract - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_multiply - NameError: name '...
FAILED tests/test_tests/my_testing_code.py::test_divide - NameError: name 'di...
============================== 4 failed in 0.06s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:37:53
============================================================
Original File: tests/my_testing_code.py
Test File Created: test_tests/my_testing_code.py
Test File Path: ./tests\test_tests/my_testing_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from my_testing_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/my_testing_code.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\my_testing_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\my_testing_code.py:2: in <module>
    from my_testing_code import add, subtract, multiply, divide
E   ImportError: cannot import name 'add' from partially initialized module 'my_testing_code' (most likely due to a circular import) (E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\my_testing_code.py)
=========================== short test summary info ===========================
ERROR tests/test_tests/my_testing_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:40:47
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code.py
Test File Path: ./tests\test_tests/testing_my_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    assert multiply(0, 2) == 0

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/testing_my_code.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.09s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:41:40
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code.py
Test File Path: ./tests\test_tests/testing_my_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    assert multiply(0, 2) == 0

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/testing_my_code.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:55:21
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code.py
Test File Path: ./tests\test_tests/testing_my_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/testing_my_code.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.09s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 13:56:05
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code.py
Test File Path: ./tests\test_tests/testing_my_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/testing_my_code.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:19:58
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code.py
Test File Path: ./tests\test_tests/testing_my_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/test_tests/testing_my_code.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:21:51
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_cases_tests/testing_my_code.py
Test File Path: ./tests\test_cases_tests/testing_my_code.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_________ ERROR collecting tests/test_cases_tests/testing_my_code.py __________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_cases_tests\testing_my_code.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_cases_tests\testing_my_code.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_cases_tests/testing_my_code.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:24:47
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code_cases.py
Test File Path: ./tests\test_tests/testing_my_code_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_________ ERROR collecting tests/test_tests/testing_my_code_cases.py __________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:29:43
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code_cases.py
Test File Path: ./tests\test_tests/testing_my_code_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_________ ERROR collecting tests/test_tests/testing_my_code_cases.py __________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:43:46
============================================================
Original File: tests/testing_my_code.py
Test File Created: test_tests/testing_my_code_cases.py
Test File Path: ./tests\test_tests/testing_my_code_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_________ ERROR collecting tests/test_tests/testing_my_code_cases.py __________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\test_tests\testing_my_code_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\test_tests\testing_my_code_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/test_tests/testing_my_code_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:48:52
============================================================
Original File: tests/testing_my_code.py
Test File Created: testing_my_code_test_cases.py
Test File Path: ./tests\testing_my_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/testing_my_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\testing_my_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\testing_my_code_test_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/testing_my_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.09s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:50:02
============================================================
Original File: tests/testing_my_code.py
Test File Created: testing_my_code_test_cases.py
Test File Path: ./tests\testing_my_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/testing_my_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\testing_my_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\testing_my_code_test_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/testing_my_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:52:40
============================================================
Original File: tests/testing_my_code.py
Test File Created: testing_my_code_test_cases.py
Test File Path: ./tests\testing_my_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/testing_my_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\testing_my_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\testing_my_code_test_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/testing_my_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:56:19
============================================================
Original File: tests/testing_my_code.py
Test File Created: testing_my_code_test_cases.py
Test File Path: ./tests\testing_my_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from tests.testing_my_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/testing_my_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\testing_my_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\testing_my_code_test_cases.py:2: in <module>
    from tests.testing_my_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'tests'
=========================== short test summary info ===========================
ERROR tests/testing_my_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.09s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 15:59:38
============================================================
Original File: tests/bhushan_tests.py
Test File Created: bhushan_tests_test_cases.py
Test File Path: ./tests\bhushan_tests_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
import pytest
from bhushan_tests import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(5, 3) == 2
    assert subtract(-2, 1) == -3
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(4, 5) == 20
    assert multiply(-2, 3) == -6
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(10, 2) == 5
    assert divide(-3, 1) == -3
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
_____________ ERROR collecting tests/bhushan_tests_test_cases.py ______________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\bhushan_tests_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\bhushan_tests_test_cases.py:2: in <module>
    from bhushan_tests import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'bhushan_tests'
=========================== short test summary info ===========================
ERROR tests/bhushan_tests_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 16:16:17
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content


Generated Test Cases:
------------------------------
import pytest
from scr.my_testing_code import my_function

def test_my_function_happy_path():
    assert my_function("input") == "output"

def test_my_function_invalid_input():
    with pytest.raises(ValueError):
        my_function("invalid_input")

def test_my_function_boundary():
    assert my_function("") == "default_output"

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:2: in <module>
    from scr.my_testing_code import my_function
E   ModuleNotFoundError: No module named 'scr'
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 16:16:51
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'scr'
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:01:51
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'scr'
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:06:35
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'scr'
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:11:20
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import add, subtract, multiply, divide
E   ModuleNotFoundError: No module named 'scr'
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:16:19
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b."""
    return a + b
def subtract(a, b):
    """Returns the difference of a and b."""
    return a - b
def multiply(a, b):
    """Returns the product of a and b."""
    return a * b 
def divide(a, b):   
    """Returns the quotient of a and b."""
    if b == 0:
        raise ValueError("Cannot divide by zero.")
    return a / b



Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import add, subtract, multiply, divide

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(1, 0)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(1, 0)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(1, 0)

def test_divide():
    assert divide(1, 2) == 0.5
    assert divide(-1, 1) == -1
    with pytest.raises(ValueError):
        divide(1, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 4 items

tests\my_testing_code_test_cases.py FFF.                                 [100%]

================================== FAILURES ===================================
__________________________________ test_add ___________________________________

    def test_add():
        assert add(1, 2) == 3
        assert add(-1, 1) == 0
>       with pytest.raises(ValueError):
             ^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'ValueError'>

tests\my_testing_code_test_cases.py:9: Failed
________________________________ test_subtract ________________________________

    def test_subtract():
        assert subtract(1, 2) == -1
        assert subtract(-1, 1) == -2
>       with pytest.raises(ValueError):
             ^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'ValueError'>

tests\my_testing_code_test_cases.py:15: Failed
________________________________ test_multiply ________________________________

    def test_multiply():
        assert multiply(1, 2) == 2
        assert multiply(-1, 1) == -1
>       with pytest.raises(ValueError):
             ^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'ValueError'>

tests\my_testing_code_test_cases.py:21: Failed
=========================== short test summary info ===========================
FAILED tests/my_testing_code_test_cases.py::test_add - Failed: DID NOT RAISE ...
FAILED tests/my_testing_code_test_cases.py::test_subtract - Failed: DID NOT R...
FAILED tests/my_testing_code_test_cases.py::test_multiply - Failed: DID NOT R...
========================= 3 failed, 1 passed in 0.05s =========================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:20:35
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
# Untracked file - showing full content
def add(a, b):
    """Returns the sum of a and b. Raises ValueError if either a or b is zero."""
    if a == 0 or b == 0:
        raise ValueError("Inputs to add() cannot be zero.")
    return a + b

def subtract(a, b):
    """Returns the difference of a and b. Raises ValueError if either a or b is zero."""
    if a == 0 or b == 0:
        raise ValueError("Inputs to subtract() cannot be zero.")
    return a - b

def multiply(a, b):
    """Returns the product of a and b. Raises ValueError if either a or b is zero."""
    if a == 0 or b == 0:
        raise ValueError("Inputs to multiply() cannot be zero.")
    return a * b




Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import add, subtract, multiply

def test_add():
    assert add(1, 2) == 3
    assert add(-1, 1) == 0
    with pytest.raises(ValueError):
        add(0, 1)

def test_subtract():
    assert subtract(1, 2) == -1
    assert subtract(-1, 1) == -2
    with pytest.raises(ValueError):
        subtract(0, 1)

def test_multiply():
    assert multiply(1, 2) == 2
    assert multiply(-1, 1) == -1
    with pytest.raises(ValueError):
        multiply(0, 1)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 3 items

tests\my_testing_code_test_cases.py ...                                  [100%]

============================== 3 passed in 0.01s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:42:34
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 6a0d422..1c3e5d1 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -17,8 +17,3 @@ def multiply(a, b):
     return a * b
 
 
-def divide(a, b):
-    """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
-    if a == 0 or b == 0:
-        raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(TypeError):
        multiply(None, 3)

def test_divide_happy_path():
    assert divide(10, 2) == 5

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(10, 0)

def test_divide_invalid_input_2():
    with pytest.raises(ValueError):
        divide(0, 2)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import multiply, divide
E   ImportError: cannot import name 'divide' from 'scr.my_testing_code' (E:\work_dsi\AI_Test_Automation_tool\scr\my_testing_code.py)
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.25s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:46:26
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 6a0d422..1c3e5d1 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -17,8 +17,3 @@ def multiply(a, b):
     return a * b
 
 
-def divide(a, b):
-    """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
-    if a == 0 or b == 0:
-        raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(TypeError):
        multiply(None, 3)

def test_divide_happy_path():
    assert divide(10, 2) == 5

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(10, 0)

def test_divide_invalid_input_2():
    with pytest.raises(ValueError):
        divide(0, 2)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import multiply, divide
E   ImportError: cannot import name 'divide' from 'scr.my_testing_code' (E:\work_dsi\AI_Test_Automation_tool\scr\my_testing_code.py)
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.16s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:47:34
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 6a0d422..bb09d83 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -16,9 +16,8 @@ def multiply(a, b):
         raise ValueError("Inputs to multiply() cannot be zero.")
     return a * b
 
-
 def divide(a, b):
     """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
     if a == 0 or b == 0:
         raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file
+    return a / b

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(ValueError):
        multiply(0, 3)

def test_divide_happy_path():
    assert divide(6, 3) == 2

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(6, 0)

def test_divide_invalid_input_2():
    with pytest.raises(ValueError):
        divide(0, 3)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 5 items

tests\my_testing_code_test_cases.py .....                                [100%]

============================== 5 passed in 0.03s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-17 17:49:50
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 6a0d422..bb09d83 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -16,9 +16,8 @@ def multiply(a, b):
         raise ValueError("Inputs to multiply() cannot be zero.")
     return a * b
 
-
 def divide(a, b):
     """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
     if a == 0 or b == 0:
         raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file
+    return a / b

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(ValueError):
        multiply(0, 3)

def test_divide_happy_path():
    assert divide(6, 3) == 2

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(6, 0)

def test_divide_invalid_input_2():
    with pytest.raises(ValueError):
        divide(0, 3)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 5 items

tests\my_testing_code_test_cases.py .....                                [100%]

============================== 5 passed in 0.03s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-17 18:11:35
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 6a0d422..bb09d83 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -16,9 +16,8 @@ def multiply(a, b):
         raise ValueError("Inputs to multiply() cannot be zero.")
     return a * b
 
-
 def divide(a, b):
     """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
     if a == 0 or b == 0:
         raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file
+    return a / b

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(ValueError):
        multiply(0, 3)

def test_divide_happy_path():
    assert divide(6, 3) == 2

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(6, 0)

def test_divide_invalid_input_2():
    with pytest.raises(ValueError):
        divide(0, 3)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 5 items

tests\my_testing_code_test_cases.py .....                                [100%]

============================== 5 passed in 0.01s ==============================


============================================================

============================================================
Test Generation Log - 2025-06-17 18:14:51
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 879cd03..9ea10ba 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -15,9 +15,3 @@ def multiply(a, b):
     if a == 0 or b == 0:
         raise ValueError("Inputs to multiply() cannot be zero.")
     return a * b
-
-def divide(a, b):
-    """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
-    if a == 0 or b == 0:
-        raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(ValueError):
        multiply(0, 3)

def test_divide_happy_path():
    assert divide(6, 3) == 2

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(6, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import multiply, divide
E   ImportError: cannot import name 'divide' from 'scr.my_testing_code' (E:\work_dsi\AI_Test_Automation_tool\scr\my_testing_code.py)
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 18:15:04
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 879cd03..9ea10ba 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -15,9 +15,3 @@ def multiply(a, b):
     if a == 0 or b == 0:
         raise ValueError("Inputs to multiply() cannot be zero.")
     return a * b
-
-def divide(a, b):
-    """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
-    if a == 0 or b == 0:
-        raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import multiply, divide

def test_multiply_happy_path():
    assert multiply(2, 3) == 6

def test_multiply_invalid_input():
    with pytest.raises(ValueError):
        multiply(0, 3)

def test_divide_happy_path():
    assert divide(6, 3) == 2

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(6, 0)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 0 items / 1 error

=================================== ERRORS ====================================
____________ ERROR collecting tests/my_testing_code_test_cases.py _____________
ImportError while importing test module 'E:\work_dsi\AI_Test_Automation_tool\tests\my_testing_code_test_cases.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\NSH43\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\my_testing_code_test_cases.py:4: in <module>
    from scr.my_testing_code import multiply, divide
E   ImportError: cannot import name 'divide' from 'scr.my_testing_code' (E:\work_dsi\AI_Test_Automation_tool\scr\my_testing_code.py)
=========================== short test summary info ===========================
ERROR tests/my_testing_code_test_cases.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.08s ===============================


============================================================

============================================================
Test Generation Log - 2025-06-17 18:29:10
============================================================
Original File: scr/my_testing_code.py
Test File Created: my_testing_code_test_cases.py
Test File Path: ./tests\my_testing_code_test_cases.py

Code Diff:
------------------------------
diff --git a/scr/my_testing_code.py b/scr/my_testing_code.py
index 879cd03..17a0ec9 100644
--- a/scr/my_testing_code.py
+++ b/scr/my_testing_code.py
@@ -20,4 +20,10 @@ def divide(a, b):
     """Returns the quotient of a and b. Raises ValueError if either a or b is zero."""
     if a == 0 or b == 0:
         raise ValueError("Inputs to divide() cannot be zero.")
-    return a / b
\ No newline at end of file
+    return a / b
+
+def power(base, exponent):
+    """Returns base raised to the power of exponent. Raises ValueError if base is zero."""
+    if base == 0:
+        raise ValueError("Base cannot be zero.")
+    return base ** exponent
\ No newline at end of file

Generated Test Cases:
------------------------------
# tests.py

import pytest
from scr.my_testing_code import divide, power

def test_divide_happy_path():
    assert divide(10, 2) == 5

def test_divide_invalid_input():
    with pytest.raises(ValueError):
        divide(0, 2)

def test_power_happy_path():
    assert power(2, 3) == 8

def test_power_invalid_input():
    with pytest.raises(ValueError):
        power(0, 3)

Test Execution Results:
------------------------------
============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0
rootdir: E:\work_dsi\AI_Test_Automation_tool
plugins: anyio-4.9.0
collected 4 items

tests\my_testing_code_test_cases.py ....                                 [100%]

============================== 4 passed in 0.01s ==============================


============================================================
